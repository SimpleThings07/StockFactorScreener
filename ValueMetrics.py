# encoding: utf-8

# Copyright (c)  - All rights reserved.
# Unintended redistribution can be punishable by law.
# By reading this message, you are automatically consenting to it 
# and you are accepting that the financial data might be incorrect.
# The financial data generated by this script is for informational purposes only 
# and should not be considered as investment advice.
# Use at your own risk.

import math


# Value metrics as described in  MSCI Value Weighted Methodology:
# 
#    - Book Value per Share (P/B Ratio)
#    - Sales Value (3-year average Sales per Share)
#    - Earnings Value (3-year average Earnings per Share)
#    - Cash Earnings Value (3-year average Cash Flow per Share)
#    
#    https://www.msci.com/eqb/methodology/meth_docs/MSCI_Value_Weighted_Index_Methodology_Book_May2012.pdf
#
class ValueMetrics:
    def __init__(self, ticker, price_to_earnings_trailing, price_to_earnings_forward, ebit_to_tev, pb_ratio):
        #self.book_value_to_price = None      #
        #self.earnings_to_price = None        # 
        #self.sales_to_value = None           # 
        #self.cash_earnings_value = None      #
        self.ticker = ticker                                        # Stock ticker symbol
        self.pe_trailing = price_to_earnings_trailing               # Price to Earnings (P/E Ratio) Trailing
        self.pe_forward = price_to_earnings_forward                 # Price to Earnings (P/E Ratio) Forward
        self.ebit_to_tev = ebit_to_tev                              # EBIT to Total Enterprise Value (EBIT/TEV)
        self.pb_ratio = pb_ratio                                    # Price to Book (P/B Ratio)




def get_operating_income (stock, ticker, quarters=4):

    """
    Calculate the operating income (EBIT) from the quarterly financials as TTM.
    EBIT (Earnings Before Interest and Taxes) is a measure of a firm's profit that includes all incomes and expenses (except interest expenses and income tax expenses).
    It is calculated as Revenues - Cost of Goods sold (COGS) - Selling/General/Administrative (SGA) = EBIT = Operating Income.

    Let's say I run a donut shop:
        - My revenue is my donut sales.
          $100k/yr
        - My COGS are the ingredients for the donuts and the labor required to produce the donuts.
          $65k/yr
        - My SGA is my rent and bills to keep things running (and maybe a depreciation charge to account for the fact I have to replace my oven every 10 years).
          $20k/yr
        - What I'm left with is my operating income, or EBIT.
          $15k/yr
    """

    operating_income_ttm = None
    
    # ---------------- Income Statement ----------------

    # Fetch Income Statement data from the financials
    income_statement = stock.quarterly_financials.T   # Transpose to have dates as rows

    # Check if the Income Statement data is available
    if income_statement is None:
        # Throw exception if the data is not available
        raise ValueError(f"No Income Statement data found (Ticker: {ticker}). Cannot calculate EBIT/TEV ratio!")

    # --------------- Operating Income / EBIT ---------------

    # Check if 'Operating Income' data is available in the Income Statement
    if 'Operating Income' in income_statement.columns:

        # Fetch the Operating Income t data from the Income Statement (Yahoo Finance)
        operating_income_quarterly = income_statement['Operating Income'].tolist()

        # Remove 'nan' values from the Operating Income list
        operating_income_quarterly = [operating_income for operating_income in operating_income_quarterly if not math.isnan(operating_income)]

        # Get the TTM Operating Income as a sum of the latest four trailing quarters of Operating Income data
        operating_income_ttm = sum(operating_income_quarterly[:quarters])

    # ------------- Pretax Income ---------------

    # Use 'Pretax Income' if 'Operating Income' is not available as fallback
    elif 'Pretax Income' in income_statement.columns:

        # Fetch the Pretax Income data from the Income Statement (Yahoo Finance)
        pretax_income_quarterly = income_statement['Pretax Income'].tolist()

        # Remove 'nan' values from the Pretax Income list
        pretax_income_quarterly = [pretax_income for pretax_income in pretax_income_quarterly if not math.isnan(pretax_income)]

        # Get the TTM Operating Income as a sum of the latest four trailing quarters of Pretax Income data
        operating_income_ttm = sum(pretax_income_quarterly[:quarters])

    # If neither 'Operating Income' nor 'Pretax Income' is available, raise an exception
    else:
        # Throw exception if the data is not available
        raise ValueError(f"'Operating Income' and 'Pretax Income' data is not available in the Income Statement (Ticker: {ticker}). Cannot calculate EBIT/TEV ratio!")


    return operating_income_ttm



def get_total_debt(balance_sheet):
    """
    Calculate the total debt from the balance sheet.
    """

    # Fetch the Total Debt data from the Balance Sheet (Yahoo Finance)
    total_debt = balance_sheet['Total Debt'].tolist()

    # Check if the total debt data is available
    if total_debt is None:

        # Throw exception if the data is not available
        raise ValueError("Total Debt data is not available")

    # Remove 'nan' values from the Total Debt list
    total_debt = [debt for debt in total_debt if not math.isnan(debt)]

    # Get the Total Debt from the latest quartal
    total_debt = total_debt[0] if total_debt else None

    return total_debt



def get_market_cap (stock):
    """
    Calculate the market capitalization.

    Market value of equity is the total dollar value of a company's equity and is also known as market capitalization. This measure of a company's value is calculated by multiplying the current stock price by the total number of outstanding shares.
    """

    o_market_cap = None

    # Fetch the Market Cap data from the stock object (Yahoo Finance)
    market_cap_yf = stock.info['marketCap']

    # Check if the market cap data is available and greater than zero
    if market_cap_yf is not None and market_cap_yf > 0:

        o_market_cap = market_cap_yf
    
    else:

        # Calculated market cap
        market_cap_calc = stock.info['currentPrice'] * stock.info['sharesOutstanding']

        o_market_cap = market_cap_calc

    return o_market_cap



def calc_enterprise_value(stock, ticker):
    """
    Calculates the enterprise value (EV) of a company.
    Enterprise value is a measure of a company's total value, often referred to as the theoretical takeover price if the company were to be bought. It is calculated as market capitalization plus total debt minus cash and cash equivalents.

    Formula:
        EV = Market Cap + Total Debt - Cash and Cash Equivalents - Short Term Investments

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.

    Returns:
        - float: The enterprise value of the company.
    """

    # 1) Equity Value (Market Cap)
    market_cap = get_market_cap (stock)

    # 2) Balance Sheet items (choose most recent quarter)
    balance_sheet = stock.quarterly_balance_sheet

    # Check if the balance sheet data is available
    if balance_sheet is None or balance_sheet.empty:
        raise ValueError(f"No Balance Sheet data found (Ticker: {ticker}). Cannot calculate Enterprise Value!")

    # the most-recent period
    balance_sheet_latest = balance_sheet.columns[0]

    # 3) Total Debt
    total_debt = balance_sheet.loc["Total Debt", balance_sheet_latest]

    # 4) Cash and Cash Equivalents
    cash = balance_sheet.loc["Cash And Cash Equivalents", balance_sheet_latest]

    # 5) Short Term Investments (if available)
    short_term_investments = 0  # Initialize to 0 in case it is not found
    try:
        # Try to fetch "Other Short Term Investments" from the balance sheet
        short_term_investments = balance_sheet.loc["Other Short Term Investments", balance_sheet_latest]
    except KeyError:
        # If "Other Short Term Investments" is not available, set it to 0
        short_term_investments = 0

    # 6) Calculate Enterprise Value from the fetched data
    enterprise_value = market_cap + total_debt - cash - short_term_investments

    return enterprise_value



def calc_ebit_to_tev (stock, ticker):
    """
    Calculates EBIT (Earnings Before Interest and Taxes) to Total Enterprise Value (TEV) ratio.

    Formula:
        EBIT / TEV = EBIT (Operating Income) / (Market Cap + Total Debt - Cash and Cash Equivalents)

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.
        - ticker (str): The stock ticker symbol.

    Returns:
        - float: EBIT/TEV ratio
    """

    ebit_to_tev = None
    QUARTERS_CNT = 4

    # ---------------- EBIT ----------------

    # Get operating income
    operating_income_ttm = get_operating_income (stock, ticker, QUARTERS_CNT)

    # Avoid division by zero
    if operating_income_ttm == 0:
        raise ValueError(f"Cannot calculate EBIT/TEV ratio (Ticker: {ticker}): Operating Income is zero.")


    # ---------------- TEV ----------------

    total_enterprise_value = calc_enterprise_value (stock, ticker)

    # --------------- EBIT/TEV ---------------

    ebit_to_tev = operating_income_ttm / total_enterprise_value


    return ebit_to_tev, total_enterprise_value
    
