# encoding: utf-8

# Copyright (c) Ivan Antunović (ivantun05@gmail.com) - All rights reserved.
# Unintended redistribution can be punishable by law.
# By reading this message, you are automatically consenting to it
# and you are accepting that the financial data might be incorrect.
# The financial data generated by this script is for informational purposes only
# and should not be considered as investment advice.
# Use at your own risk.



# Data Manipulation Modules
import pandas as pd
import math

# Local Modules
import EarningsEngine

# Local Modules
from StockFactorScreener import get_earnings



# ---------------------- Custom Exceptions ----------------------

class ROECalcError(Exception):
    """
        Custom exception for errors in Return on Equity (ROE) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message

class GPOACalcError(Exception):
    """
        Custom exception for errors in Gross Profits over Assets (GPOA) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message


class GPMARCalcError(Exception):
    """
        Custom exception for errors in Gross Profit Margin (GPMAR) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message


class CFOACalcError(Exception):
    """
        Custom exception for errors in Cash Flow over Assets (CFOA) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message



# ---------------------- Function definitions ----------------------

def calc_roe_ttm (stock, ticker):
    """
        Calculate Return on Equity (ROE) for the trailing 12 months (TTM) using Net Income and Shareholder's Equity.

            ROE = Net Income / Shareholder's Equity

            MSCI Methodology defines ROE) is as the trailing 12 month earnings per share (EPS) figure divided by the latest book value per share.

            We however use the trailing 12 month net income instead of EPS divided by the latest annual shareholder's equity.

                Net income over the last full fiscal year, or trailing 12 months
                Average shareholders' equity is calculated by adding equity at the beginning of the period. The beginning and end of the period should coincide with the period during which the net income is earned.
                Because net income is earned over a period of time and shareholders' equity is a balance sheet account often reporting on a single specific period, an analyst should take an average equity balance.
                This is often done by taking the average between the beginning balance and ending balance of equity.

                https://www.investopedia.com/terms/r/returnonequity.asp?utm_source=chatgpt.com


        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.

        Returns:
            - float: The calculated Return on Equity (ROE) TTM, or None if data is missing. Calculated as a fraction.
    """

    roe_ttm = None

    try:

        # -------------- 1. Net Income  --------------

        net_income_ttm = EarningsEngine.get_net_income (
            stock,
            ticker,
            'ttm'     # Use TTM (Trailing Twelve Months) for Net Income
        )


        # -------------- 2. Shareholder's Equity --------------

        # Fetch Shareholders' Equity (or Stockholders' Equity) from the balance sheet (quarterly data)
        balance_sheet = stock.quarterly_balance_sheet.T  # Transpose to have dates as rows

        # Get "Stockholders' Equity" from the balance sheet data
        stockholders_equity_list = balance_sheet['Stockholders Equity'].tolist()   # Convert to list for easier indexing

        # If Stockholders' Equity is not available, log a warning and set ROE as None
        if stockholders_equity_list is None:
            # Raise exception to indicate missing data
            raise ROECalcError (f"Cannot calculate ROE (Ticker: {ticker}): Data for Shareholder's Equity is missing")
        

        # Remove all NaN values from the Stockholders' Equity list
        stockholders_equity_list = [equity for equity in stockholders_equity_list if not pd.isna(equity)]
        # Check if we have at least 1 year of annual data
        

        # If your numerator is the trailing-twelve-month (TTM) net income ending in the most-recent quarter q, the cleanest book-ends for equity are:
        #   Beginning-of-period equity – the balance-sheet at q-4 (one year ago)
        #   End-of-period equity – the balance-sheet at q (now)
        #
        # Taking the simple average of those two equity values gives you the capital that supported the earnings for the full 12-month window.
        #
        # ROE(TTM)  =        Net-income_TTM
        #             ───────────────────────────────
        #               (Equity_q-4  +  Equity_q) ÷ 2

        # Check if we have at least 4 quarters of data for TTM calculation
        if len(stockholders_equity_list) < 5:
            # Raise exception to indicate missing data
            raise ROECalcError (f"Cannot calculate ROE TTM (Ticker: {ticker}): Not enough Stockholders' Equity quarterly data is available. \n Data for at least 5 quarters is required.")


        # Calculate TTM Stockholders' Equity as the average of the latest two quarters of Stockholders' Equity data
        # Latest quarter is the 0th index in the list
        # Get the latest two quarters of Stockholders' Equity
        # The latest quarter is the 0th index in the list
        # The fourth latest quarter is the 3rd index in the list

        equity_quartal_end = stockholders_equity_list[0]      # Qn from the current year  (e.g. Q1 2025)
        equity_quartal_begin = stockholders_equity_list[4]    # Qn from the previous year (e.g. Q1 2024)

        stockholders_equity_ttm = ( equity_quartal_end + equity_quartal_begin ) / 2


        # -------------- 3. Calculate ROE --------------

        # Calculate ROE TTM
        roe_ttm = net_income_ttm / stockholders_equity_ttm


        return roe_ttm

    except Exception as e:
        raise ROECalcError (f"Cannot calculate ROE (Ticker: {ticker}): An error occurred: {e}")




def calc_roe (stock, ticker, config, years=4):
    """
        Calculate Return on Equity (ROE) using Net Income and Shareholder's Equity for specified year period.

            ROE = Net Income / Shareholder's Equity

        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.
            - config (dict): A dictionary containing the configuration settings.
            - years (int): The number of years to calculate ROE for. Default is 5.

        Returns:
            - float: The calculated Return on Equity (ROE) for the specified range of years, or None if data is missing. Calculated as a fraction.
    """

    o_roe_calc_list = []

    try:

        # -------------- 1. Get Net Income  --------------

        net_income_list = get_earnings (
            stock,
            ticker,
            "net_income",
            config['Earnings_Period'],
            config['AlphaVantage']['API_Key'], 
            config['AlphaVantage']['Base_URL'], 
        )


        # -------------- 2. Get Shareholder's Equity from Balance Sheet --------------

        # Fetch Shareholders' Equity (or Stockholders' Equity) from the balance sheet (annual data)
        balance_sheet = stock.balance_sheet.T  # Transpose to have dates as rows

        try:

            # Get "Stockholders' Equity" from the balance sheet data
            stockholders_equity_list = balance_sheet['Stockholders Equity'][:years]

            # If Stockholders' Equity is not available, log a warning and set ROE as None
            if stockholders_equity_list is None or stockholders_equity_list.empty:
                raise ValueError(f"Cannot calculate ROE (Ticker: {ticker}): Data for Shareholder's Equity is missing")

        except KeyError as key_error:
                raise ValueError(f"Cannot calculate ROE (Ticker: {ticker}): Data for Shareholder's Equity is missing: {key_error}")

        # -------------- 3. Calculate ROE --------------

        # Calculate ROE for each year
        for net_income, stockholders_equity in zip (net_income_list, stockholders_equity_list):

            # ROE = Net Income / Shareholder's Equity
            roe_calc = (net_income / stockholders_equity)

            o_roe_calc_list.append(roe_calc)

        return o_roe_calc_list

    except KeyError as e:
        raise ValueError(f"KeyError during ROE calculcation: Missing expected data field in Yahoo Finance for Ticker {ticker}. Error: {e}")
    except Exception as e:
        raise ValueError(f"Unexpected error during ROE calculation for Ticker {ticker}: {e}")



def calc_gpoa_ttm ( stock, ticker ):

    """

        Calculate Gross Profits over Assets (GPOA) using Gross Profits and Total Assets with TTM data.

        GPOA = Gross Profits / Total Assets

        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.

        Returns:
            - float: The calculated Gross Profits over Assets (GPOA) TTM, or None if data is missing. Calculated as a fraction.
    
    """

    gpoa_ttm = None


    # --------------------------- Gross Profit ---------------------------

    # Get quarterly income statement
    income_statement = stock.quarterly_financials.T  # Transpose to have dates as rows

    if 'Gross Profit' not in income_statement.columns:
        # Raise GPOA Calculaction Error
        raise GPOACalcError(f"Cannot calculate GPOA (Ticker: {ticker}): 'Gross Profit' data is missing in the Income Statement.")


    # Get the Gross Profit Data and clean 'nan' values
    gross_profit_list = income_statement['Gross Profit'].tolist()
    gross_profit_list = [gross_profit for gross_profit in gross_profit_list if not math.isnan(gross_profit)]

    # Calculate Gross Profit TTM using the latest four quarters of Gross Profit data
    if len(gross_profit_list) < 4:
        raise GPOACalcError(f"Cannot calculate GPOA TTM (Ticker: {ticker}): Not enough Gross Profit quarterly data is available. \n Data for at least 4 quarters is required.")
    
    # Get the latest four quarters of Gross Profit
    gross_profit_ttm = sum(gross_profit_list[:4])  # Sum the latest four quarters of Gross Profit data


    # --------------------------- Total Assets ---------------------------

    # Get quarterly balance sheet
    balance_sheet = stock.quarterly_balance_sheet.T  # Transpose to have dates as rows

    if 'Total Assets' not in balance_sheet.columns:
        raise GPOACalcError(f"Cannot calculate GPOA (Ticker: {ticker}): 'Total Assets' data is missing in the Balance Sheet.")

    # Get the Total Assets Data and clean 'nan' values
    total_assets_list = balance_sheet['Total Assets'].tolist()
    total_assets_list = [total_assets for total_assets in total_assets_list if not math.isnan(total_assets)]

    # Calculate the average Total Assets using the latest four quarters of Total Assets data
    if len(total_assets_list) < 4:
        raise GPOACalcError(f"Cannot calculate GPOA TTM (Ticker: {ticker}): Not enough Total Assets quarterly data is available. \n Data for at least 4 quarters is required.")
    
    # Get the latest four quarters of Total Assets
    total_assets_ttm = sum(total_assets_list[:4]) / 4  # Average the latest four quarters of Total Assets data


    # --------------------------- Calculate GPOA TTM ---------------------------

    if total_assets_ttm == 0:
        raise GPOACalcError(f"Cannot calculate GPOA TTM (Ticker: {ticker}): Total Assets TTM is zero, division by zero is not allowed.")

    gpoa_ttm = gross_profit_ttm / total_assets_ttm  # Calculate GPOA TTM as Gross Profit TTM divided by Total Assets TTM

    return gpoa_ttm



def calc_gpmar_ttm ( stock, ticker ):
    """
        Calculates Gross Profit Margin (GPMAR) using Gross Profit and Revenue as TTM.

        GPMAR is calculated as: GPMAR = Gross Profit / Revenue

        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.

    """

    gpmar_ttm = None


    # Get quarterly income statement
    income_statement = stock.quarterly_financials.T  # Transpose to have dates as rows


    # --------------- Gross Profit ---------------

    if 'Gross Profit' not in income_statement.columns:
        raise GPMARCalcError(f"Cannot calculate GPOA (Ticker: {ticker}): 'Gross Profit' data is missing in the Income Statement.")

    # Get the Gross Profit Data and clean 'nan' values
    gross_profit_list = income_statement['Gross Profit'].tolist()
    gross_profit_list = [gross_profit for gross_profit in gross_profit_list if not math.isnan(gross_profit)]

    # Calculate Gross Profit TTM using the latest four quarters of Gross Profit data
    if len(gross_profit_list) < 4:
        raise GPMARCalcError(f"Cannot calculate GPOA TTM (Ticker: {ticker}): Not enough Gross Profit quarterly data is available. \n Data for at least 4 quarters is required.")
    
    # Get the latest four quarters of Gross Profit
    gross_profit_ttm = sum(gross_profit_list[:4])  # Sum the latest four quarters of Gross Profit data



    # --------------- Revenue ---------------
    if 'Total Revenue' not in income_statement.columns:
        raise GPMARCalcError(f"Cannot calculate GPMAR (Ticker: {ticker}): 'Total Revenue' data is missing in the Income Statement.")

    # Get the Revenue Data and clean 'nan' values
    revenue_list = income_statement['Total Revenue'].tolist()
    revenue_list = [revenue for revenue in revenue_list if not math.isnan(revenue)]

    # Calculate Revenue TTM using the latest four quarters of Revenue data
    if len(revenue_list) < 4:
        raise GPMARCalcError(f"Cannot calculate GPMAR TTM (Ticker: {ticker}): Not enough Revenue quarterly data is available. \n Data for at least 4 quarters is required.")
    
    # Get the latest four quarters of Revenue
    revenue_ttm = sum(revenue_list[:4])  # Sum the latest four quarters of Revenue data



    # --------------- Calculate GPMAR TTM ---------------
    if revenue_ttm == 0:
        raise GPMARCalcError(f"Cannot calculate GPMAR TTM (Ticker: {ticker}): Revenue TTM is zero, division by zero is not allowed.")

    gpmar_ttm = gross_profit_ttm / revenue_ttm  # Calculate GPMAR TTM as Gross Profit TTM divided by Revenue TTM


    return gpmar_ttm



def calc_cfoa (stock, ticker):
    """
    Calculates Cash Flow Over Assets (CFOA) for the past specified number of years using Yahoo Finance data.
    Cash Flow Over Assets (CFOA) is calculated as:

        CFOA = Cash Flow from Operating Activities / Total Assets

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.
        - ticker (str): Stock ticker symbol.

    Returns:
        - list: CFOA values for each year.
    """
    # Initialize the CFOA dictionary
    cfoa_list = []

    # Fetch the Cash Flow from Operating Activities (CFOA) data from Yahoo Finance
    try:

        # ---------------------- Cash Flow from Operating Activities ----------------------
        cash_flow_operating = None
        try:

            # Fetch the Cash Flow from Operating Activities (CFOA) data
            cash_flow_operating = stock.cashflow.loc['Operating Cash Flow']

            # Check if the CFOA data is available
            if cash_flow_operating is None:
                raise CFOACalcError (f"No Cash Flow from Operating Activities data found (Ticker: {ticker}). Cannot calculate CFOA!")

            # Convert the CFOA data to a list
            cash_flow_operating = cash_flow_operating.tolist()

        except KeyError:
            raise CFOACalcError (f"Cannot calculate CFOA! 'Operating Cash Flow' data is missing in the cash flow statement (Ticker: {ticker}).")


        # ---------------------- Total Assets ----------------------
        total_assets = None
        try:

            # Fetch the Total Assets data from the balance sheet
            total_assets = stock.balance_sheet.loc['Total Assets']

            # Check if the Total Assets data is available
            if total_assets is None:
                raise CFOACalcError(f"No Total Assets data found (Ticker: {ticker}). Cannot calculate CFOA!")
 
            # Convert the Total Assets data to a list
            total_assets = total_assets.tolist()

        except KeyError:
            raise CFOACalcError(f"Cannot calculate CFOA! 'Total Assets' data is missing in the balance sheet (Ticker: {ticker}).")


        # ---------------------- Calculate CFOA  ----------------------
        # Get the CFOA data for the requested number of years if available
        for i in range(0, min ( len(cash_flow_operating), len(total_assets) ) ):

            # Calculate the CFOA for each year
            cfoa = cash_flow_operating[i] / total_assets[i]
            # Only append if not NaN
            if not pd.isna(cfoa):
                cfoa_list.append(cfoa)

        return cfoa_list

    except Exception as e:
        raise CFOACalcError(f"Error occured while calculcating CFOA (Ticker: {ticker}): {e}!")




def calc_cfoa_ttm (stock, ticker):
    """
    Calculates Cash Flow Over Assets (CFOA) for the TTM period using Yahoo Finance data.
    Cash Flow Over Assets (CFOA) is calculated as:

        CFOA = Cash Flow from Operating Activities / Total Assets

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.
        - ticker (str): Stock ticker symbol.

    Returns:
        - cfoa_ttm (float): CFOA value for the TTM period, or None if data is missing.
    """

    cfoa_ttm = None

    # TODO: Most factor datasets (e.g., AQR DS, Alpha Research Platform) choose “closest past match” so that both numerator and denominator
    # are built only from information that was public at, or before, that quarter-end.

    # Make sure the dates match for both Cash Flow from Operating Activities and Total Assets
    # This is important to ensure that the CFOA is calculated correctly for the TTM period.
    # If the dates do not match, throw exception.

    try:

        # ---------------------- Cash Flow from Operating Activities ----------------------
        cash_flow_operating = stock.quarterly_cashflow.loc['Operating Cash Flow']

        # Check if the CFOA data is available
        if cash_flow_operating is None:
            raise CFOACalcError(f"No Cash Flow from Operating Activities data found (Ticker: {ticker}). Cannot calculate CFOA (ttm)!")

        # Convert the CFOA data to a list and clean 'nan' values
        cash_flow_operating_list = cash_flow_operating.tolist()
        cash_flow_operating_list = [cfo for cfo in cash_flow_operating_list if not pd.isna(cfo)]

        # Calculate Cash Flow from Operating Activities (CFOA) TTM using the latest four quarters of CFOA data
        if len(cash_flow_operating_list) < 4:
            raise CFOACalcError(f"Cannot calculate CFOA TTM (Ticker: {ticker}): Not enough Cash Flow from Operating Activities quarterly data is available. \n Data for at least 4 quarters is required.")

        # Get the latest four quarters of Cash Flow from Operating Activities
        cash_flow_operating_list = cash_flow_operating_list[:4]  # Get the
        # latest four quarters of Cash Flow from Operating Activities data
        # Calculate the sum of the latest four quarters of Cash Flow from Operating Activities
        cash_flow_operating_ttm = sum(cash_flow_operating_list[:4])  # Sum the latest four quarters of Cash Flow from Operating Activities data


        # ---------------------- Total Assets ----------------------
        total_assets = stock.quarterly_balance_sheet.loc['Total Assets']

        # Check if the Total Assets data is available
        if total_assets is None:
            raise CFOACalcError(f"No Total Assets data found (Ticker: {ticker}). Cannot calculate CFOA TTM!")

        # Convert the Total Assets data to a list and clean 'nan' values
        total_assets_list = total_assets.tolist()
        total_assets_list = [ta for ta in total_assets_list if not pd.isna(ta)]

        # Calculate Total Assets as the avrage of the latest four quarters of Total Assets data
        if len(total_assets_list) < 4:
            raise CFOACalcError(f"Cannot calculate CFOA TTM (Ticker: {ticker}): Not enough Total Assets quarterly data is available. \n Data for at least 4 quarters is required.")

        # Get the latest four quarters of Total Assets
        total_assets_list = total_assets_list[:4]  # Get the latest four quarters of Total Assets data
        # Calculate the average of the latest four quarters of Total Assets
        total_assets_avg = sum(total_assets_list) / len(total_assets_list)  # Average


        # ---------------------- Calculate CFOA TTM  ----------------------

        # Make sure that Total Assets is not zero to avoid division by zero
        if total_assets_avg == 0:
            raise CFOACalcError(f"Cannot calculate CFOA TTM (Ticker: {ticker}): Total Assets average is zero, division by zero is not allowed.")

        # Calculate TTM CFOA as the average of the latest four quarters of Cash Flow from Operating Activities divided by the average of the latest four quarters of Total Assets
        cfoa_ttm = cash_flow_operating_ttm / total_assets_avg

        return cfoa_ttm

    except Exception as e:
        raise CFOACalcError(f"Error occured while calculcating CFOA TTM (Ticker: {ticker}): {e}!")