# encoding: utf-8

# Copyright (c) Ivan AntunoviÄ‡ (ivantun05@gmail.com) - All rights reserved.
# Unintended redistribution can be punishable by law.
# By reading this message, you are automatically consenting to it
# and you are accepting that the financial data might be incorrect.
# The financial data generated by this script is for informational purposes only
# and should not be considered as investment advice.
# Use at your own risk.

# Standard Python Modules
import math
from datetime import timedelta
import pandas as pd

# Finance Metrics Modules
import yfinance as yf



# ---------------------- Custom Exceptions ----------------------

class OperatingIncomeError (Exception):
    """
        Custom exception for errors when calculating Operating Income (EBIT).
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message



# Value metrics as described in  MSCI Value Weighted Methodology:
# 
#    - Book Value per Share (P/B Ratio)
#    - Sales Value (3-year average Sales per Share)
#    - Earnings Value (3-year average Earnings per Share)
#    - Cash Earnings Value (3-year average Cash Flow per Share)
#    
#    https://www.msci.com/eqb/methodology/meth_docs/MSCI_Value_Weighted_Index_Methodology_Book_May2012.pdf
#
class ValueMetrics:
    def __init__(self, ticker, price_to_earnings_trailing, price_to_earnings_forward, ebit_to_tev, enterprise_value, pb_ratio ):
        #self.book_value_to_price = None      #
        #self.earnings_to_price = None        # 
        #self.sales_to_value = None           # 
        #self.cash_earnings_value = None      #
        self.ticker = ticker                                        # Stock ticker symbol
        self.pe_trailing = price_to_earnings_trailing               # Price to Earnings (P/E Ratio) Trailing
        self.pe_forward = price_to_earnings_forward                 # Price to Earnings (P/E Ratio) Forward
        self.ebit_to_tev = ebit_to_tev                              # EBIT to Total Enterprise Value (EBIT/TEV)
        self.pb_ratio = pb_ratio                                    # Price to Book (P/B Ratio)

        # Convert enterprise value to billions for consistency
        if enterprise_value is not None:
            self.enterprise_value_bill = enterprise_value / 1e9
        else:
            self.enterprise_value_bill = None                       # Total Enterprise Value (TEV) in billions



def get_operating_income_ttm (stock, ticker):
    """
    Calculate the operating income (EBIT) from the quarterly financials as TTM.
    EBIT (Earnings Before Interest and Taxes) is a measure of a firm's profit that includes all incomes and expenses (except interest expenses and income tax expenses).
    It is calculated as Revenues - Cost of Goods sold (COGS) - Selling/General/Administrative (SGA) = EBIT = Operating Income.

    Let's say I run a donut shop:
        - My revenue is my donut sales.
          $100k/yr
        - My COGS are the ingredients for the donuts and the labor required to produce the donuts.
          $65k/yr
        - My SGA is my rent and bills to keep things running (and maybe a depreciation charge to account for the fact I have to replace my oven every 10 years).
          $20k/yr
        - What I'm left with is my operating income, or EBIT.
          $15k/yr

    Raises:
        OperatingIncomeError: If required operating income or pretax income data is missing or insufficient.
    """

    operating_income_ttm = None
    QUARTERS = 4

    # ---------------- Income Statement ----------------

    # Fetch Income Statement data from the financials (quarterly data)
    income_statement = stock.quarterly_financials.T   # Transpose to have dates as rows

    # Check if the Income Statement data is available
    if income_statement is None or income_statement.empty:
        # Throw exception if the data is not available
        raise OperatingIncomeError (f"No Income Statement (quarterly) data found (Ticker: {ticker}). Cannot calculate EBIT/TEV ratio!")

    # --------------- Operating Income / EBIT ---------------

    # Check if 'Operating Income' data is available in the Income Statement
    if 'Operating Income' in income_statement.columns:

        # Fetch the Operating Income t data from the Income Statement (Yahoo Finance)
        operating_income_quarterly = income_statement['Operating Income'].tolist()

        # Remove 'nan' values from the Operating Income list
        operating_income_quarterly = [operating_income for operating_income in operating_income_quarterly if not math.isnan(operating_income)]

        # Get the TTM Operating Income as a sum of the latest four trailing quarters of Operating Income data
        operating_income_ttm = sum(operating_income_quarterly[:QUARTERS])

    # ------------- Pretax Income ---------------

    # Use 'Pretax Income' if 'Operating Income' is not available as fallback
    elif 'Pretax Income' in income_statement.columns:

        # Fetch the Pretax Income data from the Income Statement (Yahoo Finance)
        pretax_income_quarterly = income_statement['Pretax Income'].tolist()

        # Remove 'nan' values from the Pretax Income list
        pretax_income_quarterly = [pretax_income for pretax_income in pretax_income_quarterly if not math.isnan(pretax_income)]

        # Get the TTM Operating Income as a sum of the latest four trailing quarters of Pretax Income data
        operating_income_ttm = sum(pretax_income_quarterly[:QUARTERS])

    # If neither 'Operating Income' nor 'Pretax Income' is available, raise an exception
    else:
        # Throw exception if the data is not available
        raise OperatingIncomeError (f"'Operating Income' and 'Pretax Income' data is not available in the Income Statement (Ticker: {ticker}). Cannot calculate EBIT/TEV ratio!")


    return operating_income_ttm



def get_operating_income_annual (stock, ticker):
    """
    Calculate the operating income (EBIT) from the latest annual data.
    EBIT (Earnings Before Interest and Taxes) is a measure of a firm's profit that includes all incomes and expenses (except interest expenses and income tax expenses).
    It is calculated as Revenues - Cost of Goods sold (COGS) - Selling/General/Administrative (SGA) = EBIT = Operating Income.

    Let's say I run a donut shop:
        - My revenue is my donut sales.
          $100k/yr
        - My COGS are the ingredients for the donuts and the labor required to produce the donuts.
          $65k/yr
        - My SGA is my rent and bills to keep things running (and maybe a depreciation charge to account for the fact I have to replace my oven every 10 years).
          $20k/yr
        - What I'm left with is my operating income, or EBIT.
          $15k/yr

    Raises:
        OperatingIncomeError: If required operating income or pretax income data is missing or insufficient.
    """

    # Function output
    # Annual operating income
    operating_income = None

    # ---------------- Income Statement ----------------

    # Fetch Income Statement data from the financials (annual data)
    income_statement = stock.financials.T  # Transpose to have dates as rows

    # Check if the Income Statement data is available
    if income_statement is None or income_statement.empty:
        # Throw exception if the data is not available
        raise OperatingIncomeError (f"No Income Statement (annual) data found (Ticker: {ticker}). Cannot calculate EBIT/TEV ratio!")

    # --------------- Operating Income / EBIT ---------------

    # Check if 'Operating Income' data is available in the Income Statement
    if 'Operating Income' in income_statement.columns:

        # Fetch the Operating Income t data from the Income Statement (Yahoo Finance)
        operating_income_annual = income_statement['Operating Income'].tolist()

        # operating_income_annual 'nan' values from the Operating Income list
        operating_income_annual = [operating_income for operating_income in operating_income_annual if not math.isnan(operating_income)]

        # Check if the list is empty or less than one element
        if not operating_income_annual or len(operating_income_annual) < 1:
            # If the list is empty, raise an exception
            raise OperatingIncomeError (f"'Operating Income' (annual) data is not available in the Income Statement (Ticker: {ticker}). Cannot calculate EBIT/TEV ratio!")

        # Get the latest annual Operating Income data
        operating_income = operating_income_annual[0]

    # ------------- Pretax Income ---------------

    # Use 'Pretax Income' if 'Operating Income' is not available as fallback
    elif 'Pretax Income' in income_statement.columns:

        # Fetch the Pretax Income data from the Income Statement (Yahoo Finance)
        pretax_income_annual = income_statement['Pretax Income'].tolist()

        # Remove 'nan' values from the Pretax Income list
        pretax_income_annual = [pretax_income for pretax_income in pretax_income_annual if not math.isnan(pretax_income)]

        # Check if the list is empty or less than one element
        if not pretax_income_annual or len(pretax_income_annual) < 1:
            # If the list is empty, raise an exception
            raise OperatingIncomeError (f"'Pretax Income' (annual) data is not available in the Income Statement (Ticker: {ticker}). Cannot calculate EBIT/TEV ratio!")

        # Get the latest annual Pretax Income data
        operating_income = pretax_income_annual[0]

    # If neither 'Operating Income' nor 'Pretax Income' is available, raise an exception
    else:
        # Throw exception if the data is not available
        raise OperatingIncomeError (f"'Operating Income' and 'Pretax Income' data is not available in the Income Statement (Ticker: {ticker}). Cannot calculate EBIT/TEV ratio!")


    return operating_income



def get_total_debt (balance_sheet):
    """
    Calculate the total debt from the balance sheet.

    Raises:
        ValueError: If total debt data is not available.
    """

    # Fetch the Total Debt data from the Balance Sheet (Yahoo Finance)
    total_debt = balance_sheet['Total Debt'].tolist()

    # Check if the total debt data is available
    if total_debt is None:

        # Throw exception if the data is not available
        raise ValueError ("Total Debt data is not available")

    # Remove 'nan' values from the Total Debt list
    total_debt = [debt for debt in total_debt if not math.isnan(debt)]

    # Get the Total Debt from the latest quartal
    total_debt = total_debt[0] if total_debt else None

    return total_debt



def get_market_cap (stock):
    """
    Calculate the market capitalization.

    Market value of equity is the total dollar value of a company's equity and is also known as market capitalization. This measure of a company's value is calculated by multiplying the current stock price by the total number of outstanding shares.

    Returns:
        float: The market capitalization of the company, or None if not available.
    """

    # Function output
    o_market_cap = None


    market_cap_yf = None
    try:

        # Fetch the Market Cap data from the stock object (Yahoo Finance)
        market_cap_yf = stock.info['marketCap']

    except KeyError:
        # If 'marketCap' is not available, set it to None
        market_cap_yf = None

    # Check if the market cap data is available and greater than zero
    if market_cap_yf is not None and market_cap_yf > 0:

        # Use the market cap from Yahoo Finance
        o_market_cap = market_cap_yf

    else:

        market_cap_calc = 0

        try:

            # Calculated market cap
            market_cap_calc = stock.info['currentPrice'] * stock.info['sharesOutstanding']

            # Use manually calculated market cap
            o_market_cap = market_cap_calc

        except KeyError:
            # If 'currentPrice' or 'sharesOutstanding' is not available, set it to None
            market_cap_calc = None

    return o_market_cap



def get_market_cap_annual (stock, ticker):
    """
        Calculate the market capitalization using the latest annual balance sheet data.

        Market value of equity is the total dollar value of a company's equity and is also known as market capitalization.
        This measure of a company's value is calculated by multiplying the current stock price by the total number of outstanding shares.

        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.

        Returns:
            - float: The market capitalization of the company.

        Raises:
            ValueError: If balance sheet or share/price data is missing or insufficient.
    """

    # Function output
    market_cap_annual = None

    # 1) Share Outstanding from the latest annual balance sheet
    # Fetch the most recent annual period
    balance_sheet = stock.balance_sheet
    if balance_sheet.empty or balance_sheet is None:
        raise ValueError(f"No Balance Sheet (annual) data found (Ticker: {ticker}). Cannot calculate Market Cap!")

    latest_col = balance_sheet.columns[0]      # pandas.Timestamp
    shares_row = "Ordinary Shares Number"
    if shares_row not in balance_sheet.index:
        raise ValueError(f"'Ordinary Shares Number' row not found in Balance Sheet (Ticker: {ticker}). Cannot calculate (annual) Market Cap!")

    shares_outstanding = float(balance_sheet.loc[shares_row, latest_col])  # already in *units* (Yahoo feeds)


    # 2) Share price on (or just before) the the latest annual balance sheet date
    latest_annual_date = latest_col.to_pydatetime().date()
    # Look five trading days either side in case of weekend / holiday
    hist = yf.Ticker(ticker).history(
        start=latest_annual_date - timedelta(days=7),
        end=latest_annual_date + timedelta(days=1),
        auto_adjust=False
    )
    # Check if the historical data is available
    if hist.empty:
        raise ValueError(f"No historical data found for {ticker} around {latest_annual_date}. Cannot calculate (annual) Market Cap!")

    # get the last close on/before 'latest_annual_date' price
    cutoff = pd.Timestamp(latest_annual_date).tz_localize("UTC")      # aware
    stock_price = hist.loc[:cutoff, "Close"].iloc[-1]             # works

    if pd.isna(stock_price):
        raise ValueError(f"No stock price found for {ticker} on or before {latest_annual_date}. Cannot calculate (annual) Market Cap!")


    # 3) currency normalisation (LSE quotes come in pence) -----------------
    currency = (yf.Ticker(ticker).fast_info.get("currency") or "UNKNOWN").upper()
    if currency in {"GBP", "GBX", "GBp"} and stock_price < 1000:       # pence â†’ pounds
        stock_price /= 100
        currency = "GBP"


    # 4) Calculate Market Cap ----------------------
    market_cap_annual = stock_price * shares_outstanding

    # Convert from np.float to float for consistency
    market_cap_annual = float(market_cap_annual)

    return market_cap_annual



def calc_enterprise_value_latest(stock, ticker):
    """
    Calculates the enterprise value (EV) of a company using latest quarter balance sheet data.
    Enterprise value is a measure of a company's total value, often referred to as the theoretical takeover price if the company were to be bought. It is calculated as market capitalization plus total debt minus cash and cash equivalents.

    Formula:
        EV = Market Cap + Total Debt - Cash and Cash Equivalents - Short Term Investments

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.

    Returns:
        - float: The enterprise value of the company.

    Raises:
        ValueError: If market cap or balance sheet data is missing or insufficient.
    """

    # 1) Equity Value (Market Cap)
    market_cap = get_market_cap (stock)

    # Check if market cap is available and greater than zero
    if market_cap is None or market_cap <= 0:
        raise ValueError(f"Cannot calculate Enterprise Value (Ticker: {ticker}): Market Cap is not available or is zero.")

    # 2) Balance Sheet items (choose most recent quarter)
    balance_sheet = stock.quarterly_balance_sheet

    # Check if the balance sheet data is available
    if balance_sheet is None or balance_sheet.empty:
        raise ValueError(f"No Balance Sheet (quarterly) data found (Ticker: {ticker}). Cannot calculate Enterprise Value!")

    # the most-recent period
    balance_sheet_latest = balance_sheet.columns[0]


    # 3) Total Debt
    total_debt = 0 # Initialize to 0 in case it is not found
    try:

        total_debt = balance_sheet.loc["Total Debt", balance_sheet_latest]
        # Check if total debt is NaN or None, and set it to 0 if so
        if math.isnan(total_debt) or total_debt is None:
            total_debt = 0

    except KeyError:
        # If "Total Debt" is not available, set it to 0
        # This can happen if the company has no debt or the data is not available
        total_debt = 0


    # 4) Cash and Cash Equivalents
    cash = 0  # Initialize to 0 in case it is not found
    try:
        cash = balance_sheet.loc["Cash And Cash Equivalents", balance_sheet_latest]
        # Check if cash is NaN or None, and set it to 0 if so
        if math.isnan(cash) or cash is None:
            cash = 0
    except KeyError:
        # If "Cash And Cash Equivalents" is not available, set it to 0
        cash = 0



    # 5) Short Term Investments (if available)
    short_term_investments = 0  # Initialize to 0 in case it is not found
    try:
        # Try to fetch "Other Short Term Investments" from the balance sheet
        short_term_investments = balance_sheet.loc["Other Short Term Investments", balance_sheet_latest]

        # If 'short_term_investments' is NaN, set it to 0
        if math.isnan(short_term_investments):
            short_term_investments = 0

    except KeyError:
        # If "Other Short Term Investments" is not available, set it to 0
        short_term_investments = 0


    # 6) Calculate Enterprise Value from the fetched data
    enterprise_value = market_cap + total_debt - cash - short_term_investments

    return enterprise_value



def calc_enterprise_value_annual (stock, ticker):
    """
    Calculates the enterprise value (EV) of a company using annual quarter balance sheet data.
    Enterprise value is a measure of a company's total value, often referred to as the theoretical takeover price if the company were to be bought. It is calculated as market capitalization plus total debt minus cash and cash equivalents.

    Formula:
        EV = Market Cap + Total Debt - Cash and Cash Equivalents - Short Term Investments

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.

    Returns:
        - float: The enterprise value of the company.

    Raises:
        ValueError: If market cap or balance sheet data is missing or insufficient.
    """

    # 1) Equity Value (Market Cap)
    market_cap = get_market_cap_annual (stock, ticker)

    # Check if market cap is available and greater than zero
    if market_cap is None or market_cap <= 0:
        raise ValueError(f"Cannot calculate Enterprise Value (Ticker: {ticker}): Market Cap is not available or is zero.")

    # 2) Balance Sheet items (choose most recent annual data)
    balance_sheet = stock.balance_sheet

    # Check if the balance sheet data is available
    if balance_sheet is None or balance_sheet.empty:
        raise ValueError(f"No Balance Sheet (annual) data found (Ticker: {ticker}). Cannot calculate Enterprise Value!")

    # the most-recent period
    balance_sheet_latest = balance_sheet.columns[0]


    # 3) Total Debt
    total_debt = 0 # Initialize to 0 in case it is not found
    try:

        total_debt = balance_sheet.loc["Total Debt", balance_sheet_latest]
        # Check if total debt is NaN or None, and set it to 0 if so
        if math.isnan(total_debt) or total_debt is None:
            total_debt = 0

    except KeyError:
        # If "Total Debt" is not available, set it to 0
        # This can happen if the company has no debt or the data is not available
        total_debt = 0


    # 4) Cash and Cash Equivalents
    cash = 0  # Initialize to 0 in case it is not found
    try:
        cash = balance_sheet.loc["Cash And Cash Equivalents", balance_sheet_latest]
        # Check if cash is NaN or None, and set it to 0 if so
        if math.isnan(cash) or cash is None:
            cash = 0
    except KeyError:
        # If "Cash And Cash Equivalents" is not available, set it to 0
        cash = 0



    # 5) Short Term Investments (if available)
    short_term_investments = 0  # Initialize to 0 in case it is not found
    try:
        # Try to fetch "Other Short Term Investments" from the balance sheet
        short_term_investments = balance_sheet.loc["Other Short Term Investments", balance_sheet_latest]

        # If 'short_term_investments' is NaN, set it to 0
        if math.isnan(short_term_investments):
            short_term_investments = 0

    except KeyError:
        # If "Other Short Term Investments" is not available, set it to 0
        short_term_investments = 0


    # 6) Calculate Enterprise Value from the fetched data
    enterprise_value = market_cap + total_debt - cash - short_term_investments

    return enterprise_value



def calc_ebit_to_tev (stock, ticker):
    """
    Calculates EBIT (Earnings Before Interest and Taxes) to Total Enterprise Value (TEV) ratio.

    Formula:
        EBIT / TEV = EBIT (Operating Income) / (Market Cap + Total Debt - Cash and Cash Equivalents)

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.
        - ticker (str): The stock ticker symbol.

    Returns:
        - float: EBIT/TEV ratio

    Raises:
        ValueError: If operating income or enterprise value is zero or missing for both quarterly and annual data.
        OperatingIncomeError: If required operating income or pretax income data is missing or insufficient.
    """

    ebit_to_tev, total_enterprise_value = None, None

    # ---------------- EBIT ----------------

    try:

        # Get operating income
        operating_income_ttm = get_operating_income_ttm (stock, ticker)

        # Avoid division by zero
        if operating_income_ttm == 0:
            raise ValueError(f"Cannot calculate EBIT/TEV ratio (Ticker: {ticker}): Operating Income (quarterly) is zero.")


        # ---------------- TEV ----------------

        total_enterprise_value = calc_enterprise_value_latest (stock, ticker)

        if total_enterprise_value == 0:
            raise ValueError(f"Cannot calculate EBIT/TEV ratio (Ticker: {ticker}): Total Enterprise Value (quarterly) is zero.")

        # --------------- EBIT/TEV ---------------

        ebit_to_tev = operating_income_ttm / total_enterprise_value

    # If there is no quarterly data or error, fallback to annual data
    except Exception:

        # Get operating income
        operating_income_annual = get_operating_income_annual (stock, ticker)

        # Avoid division by zero
        if operating_income_annual == 0:
            raise ValueError(f"Cannot calculate EBIT/TEV ratio (Ticker: {ticker}): Operating Income (annual) is zero.")

        # ---------------- TEV ----------------

        total_enterprise_value = calc_enterprise_value_annual (stock, ticker)

        if total_enterprise_value == 0:
            raise ValueError(f"Cannot calculate EBIT/TEV ratio (Ticker: {ticker}): Total Enterprise Value (annual) is zero.")

        # --------------- EBIT/TEV ---------------

        ebit_to_tev = operating_income_annual / total_enterprise_value


    return ebit_to_tev, total_enterprise_value

