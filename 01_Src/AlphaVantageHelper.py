# encoding: utf-8

# Copyright (c) Ivan AntunoviÄ‡ (ivantun05@gmail.com) - All rights reserved.
# Unintended redistribution can be punishable by law.
# By reading this message, you are automatically consenting to it
# and you are accepting that the financial data might be incorrect.
# The financial data generated by this script is for informational purposes only
# and should not be considered as investment advice.
# Use at your own risk.


# Standard Python Modules
import requests        # HTTP Requests Module



# ---------------------- Custom Exceptions ----------------------

class AlphaVantageError (Exception):
    """
        Custom exception for errors when using AlphaVantage.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message



# ---------------------- Function definitions ----------------------

# Function to fetch annual income statement data (EPS or Net Income) from Alpha Vantage
def fetch_earnings_alpha_vantage (api_key, base_url, ticker, data_type="eps", earnings_period="annual"):

    """
        Function to fetch annual income statement data (EPS or Net Income) from Alpha Vantage as a fallback.

        https://www.alphavantage.co/documentation/#income-statement

        Parameters:
        - api_key (str): Your Alpha Vantage API key.
        - base_url (str): The base URL for the Alpha Vantage API.
        - ticker (str): The stock ticker symbol (e.g., 'AAPL').
        - data_type (str): The type of data to fetch ('eps' for Earnings per Share, 'net_income' for Net Income).
        - earnings_period (str): The period for which to fetch the data ('annual' or 'quarterly').

        Returns:
        - list: A list of annual earnings data (EPS or Net Income) fetched from Alpha Vantage.
    """

    try:
        # Base URL for Alpha Vantage Income Statement API
        alpha_vantage_url = base_url

        # Initialize the Alpha Vantage function based on the data type
        alpha_vantage_function = None

        # Set the Alpha Vantage function based on the data type
        if data_type == "eps":
            alpha_vantage_function = "EARNINGS"
        elif data_type == "net_income":
            alpha_vantage_function = "INCOME_STATEMENT"


        # Parameters for the API request
        params = {
            "function": alpha_vantage_function,  # Alpha Vantage function to query
            "symbol": ticker,                    # Ticker symbol (e.g., MSFT)
            "apikey": api_key,                   # Your API key
            "datatype": "json"                   # You can choose "map", "json", or "csv"
        }

        # Sending request to the API
        response = requests.get(alpha_vantage_url, params=params)
        
        # HTTP Status Code for successful response
        HTTP_OK = 200

        # Check if response is successful
        if HTTP_OK == response.status_code:

            # Extract the JSON data from the response
            alpha_vantage_data = response.json()

            # -------------- 1. EPS --------------
            if "eps" == data_type:

                # -------------- 1.1 EPS - Annual --------------
                if "annual" == earnings_period:

                    # If the response contains the 'annualEarnings' key, extract the data
                    if 'annualEarnings' in alpha_vantage_data:

                        # Extract the annual earnings data
                        annual_earnings = alpha_vantage_data['annualEarnings']

                        # Extract and convert EPS data from string into floats
                        eps_data = [float(earnings.get("reportedEPS", 0)) for earnings in annual_earnings]

                        return eps_data
                    
                    # If the response does not contain the 'annualEarnings' key
                    else:
                        exception_msg = f"No 'annualEarnings' data available for {ticker} on 'Alpha Vantage'."

                        # Check if the response contains 'Information' key
                        if 'Information' in alpha_vantage_data:
                            alpha_vantage_info = alpha_vantage_data['Information']

                            exception_msg = f"{exception_msg} \n 'Alpha Vantage' Response: {alpha_vantage_info}"

                        raise AlphaVantageError (exception_msg)

                # -------------- 1.2 EPS - Quarterly --------------
                elif "quarterly" == earnings_period:

                    # If the response contains the 'quarterlyEarnings' key, extract the data
                    if 'quarterlyEarnings' in alpha_vantage_data:

                        # Extract the quarterly earnings data
                        quarterly_earnings = alpha_vantage_data['quarterlyEarnings']

                        # Extract and convert EPS data from string into floats
                        eps_data = [float(earnings.get("reportedEPS", 0)) for earnings in quarterly_earnings]

                        return eps_data
                    
                    # If the response does not contain the 'quarterlyEarnings' key
                    else:
                        exception_msg = f"No 'quarterlyEarnings' data available for {ticker} on 'Alpha Vantage'."

                        # Check if the response contains 'Information' key
                        if 'Information' in alpha_vantage_data:
                            alpha_vantage_info = alpha_vantage_data['Information']
                            exception_msg = f"{exception_msg} \n 'Alpha Vantage' Response: {alpha_vantage_info}"

                        raise AlphaVantageError (exception_msg)
                # If the earnings_period is invalid
                else:
                    exception_msg = f"Invalid earnings_period '{earnings_period}' specified. Please choose 'annual' or 'quarterly'."
                    raise AlphaVantageError (exception_msg)

            # -------------- 2. Net Income --------------
            elif "net_income" == data_type:

                # -------------- 2.1 Net Income - Annual --------------
                if "annual" == earnings_period:

                    # If the response contains the 'annualReports' key, extract the data
                    if 'annualReports' in alpha_vantage_data:

                        # Extract the annual reports data
                        annual_reports = alpha_vantage_data['annualReports']

                        # Extract and convert Net Income data from string into floats
                        net_income_data = [float(report.get("netIncome", 0)) for report in annual_reports]

                        return net_income_data

                    # If the response does not contain the 'annualReports' key
                    else:
                        exception_msg = f"No 'annualReports' data available for {ticker} on 'Alpha Vantage'."

                        # Check if the response contains 'Information' key
                        if 'Information' in alpha_vantage_data:
                            alpha_vantage_info = alpha_vantage_data['Information']
                            exception_msg = f"{exception_msg} \n 'Alpha Vantage' Response: {alpha_vantage_info}"

                        raise AlphaVantageError (exception_msg)

                # -------------- 2.2 Net Income - Quarterly --------------
                elif "quarterly" == earnings_period:
            
                    # If the response contains the 'quarterlyReports' key, extract the data
                    if 'quarterlyReports' in alpha_vantage_data:

                        # Extract the quarterly reports data
                        quarterly_reports = alpha_vantage_data['quarterlyReports']

                        # Extract and convert Net Income data from string into floats
                        net_income_data = [float(report.get("netIncome", 0)) for report in quarterly_reports]

                        return net_income_data

                    # If the response does not contain the 'quarterlyReports' key
                    else:

                        exception_msg = f"No 'quarterlyReports' data available for {ticker} on 'Alpha Vantage'."

                        # Check if the response contains 'Information' key
                        if 'Information' in alpha_vantage_data:
                            alpha_vantage_info = alpha_vantage_data['Information']
                            exception_msg = f"{exception_msg} \n 'Alpha Vantage' Response: {alpha_vantage_info}"

                        raise AlphaVantageError (exception_msg)

                # If the earnings_period is invalid
                else:
                    raise AlphaVantageError (f"Invalid earnings_period '{earnings_period}' specified. Please choose 'annual' or 'quarterly'.")

            else:
                raise AlphaVantageError (f"No data available for {ticker} on 'Alpha Vantage'.")

        else:
            exception_msg = f"Error fetching data from 'Alpha Vantage' for {ticker}."
            exception_msg = f"{exception_msg} \n HTTP Status Code: {response.status_code}"
            raise AlphaVantageError (exception_msg)

    except Exception as exc:
        raise AlphaVantageError (f"Error fetching earnings data from 'Alpha Vantage' for {ticker}: {exc}") from exc



def get_balance_sheet_alpha_vantage (api_key, base_url, ticker, balance_sheet_period="annual"):

    """
        Function to fetch Balance Sheet data from Alpha Vantage.
        
        Parameters: 
            - api_key (str): Your Alpha Vantage API key.
            - base_url (str): The base URL for the Alpha Vantage API.
            - ticker (str): The stock ticker symbol (e.g., 'AAPL').
            - balance_sheet_period (str): The period for which to fetch the data ('annual' or 'quarterly').

        Returns:
            - list: A list of Balance Sheet data fetched from Alpha Vantage.
    """

    try:
        # Base URL for Alpha Vantage Balance Sheet API
        alpha_vantage_url = base_url

        # Alpha Vantage function to query
        alpha_vantage_function = "BALANCE_SHEET"

        # Parameters for the API request
        params = {
            "function": alpha_vantage_function,  # Alpha Vantage function to query
            "symbol": ticker,                    # Ticker symbol (e.g., MSFT)
            "apikey": api_key,                   # Your API key
            "datatype": "json"                   # You can choose "map", "json", or "csv"
        }


        # Sending request to the API
        response = requests.get(alpha_vantage_url, params=params, timeout=10)

        # HTTP Status Code for successful response
        HTTP_OK = 200

        # Check if response is successful
        if HTTP_OK == response.status_code:

            # Extract the JSON data from the response
            alpha_vantage_data = response.json()

            # If the Balance Sheet is "annual"
            if "annual" == balance_sheet_period:
                    
                # If the response contains the 'annualReports' key, extract the data
                if 'annualReports' in alpha_vantage_data:
                    
                    # Extract the annual reports data
                    annual_balance_sheet_reports = alpha_vantage_data['annualReports']

                    return annual_balance_sheet_reports
                
                # If the response does not contain the 'annualReports' key
                else:

                    exception_msg = f"No Balance Sheet 'annualReports' data available on 'Alpha Vantage' (Ticker: {ticker})."

                     # Check if the response contains 'Information' key
                    if 'Information' in alpha_vantage_data:

                        # Extract the information message from the response
                        alpha_vantage_info = alpha_vantage_data['Information']

                        exception_msg = f"{exception_msg}\n 'Alpha Vantage' Response: {alpha_vantage_info}"

                    raise AlphaVantageError (exception_msg)

  
            elif "quarterly" == balance_sheet_period:

                # If the response contains the 'quarterlyReports' key, extract the data
                if 'quarterlyReports' in alpha_vantage_data:
                    
                    # Extract the quarterly reports data
                    quarterly_balance_sheet_reports = alpha_vantage_data['quarterlyReports']

                    return quarterly_balance_sheet_reports
                
                # If the response does not contain the 'quarterlyReports' key
                else:

                    exception_msg = f"No Balance Sheet 'quarterlyReports' data available on 'Alpha Vantage' (Ticker: {ticker})."
      
                    # Check if the response contains 'Information' key
                    if 'Information' in alpha_vantage_data:
                        alpha_vantage_info = alpha_vantage_data['Information']

                        exception_msg = f"{exception_msg}\n 'Alpha Vantage' Response: {alpha_vantage_info}"

                    raise AlphaVantageError (exception_msg)

            else:
                raise AlphaVantageError (f"Invalid Balance Sheet period '{balance_sheet_period}' specified. Please choose 'annual' or 'quarterly' (Ticker: {ticker}).")

    except Exception as exc:
        raise AlphaVantageError(f"Error fetching Balance Sheet data from 'Alpha Vantage' (Ticker: {ticker}). Error: {exc}") from exc



def get_income_statement_alpha_vantage (api_key, base_url, ticker, income_statement_period="annual"):

    """
        Function to fetch Income Statement data from Alpha Vantage.
        
        Parameters: 
            - api_key (str): Your Alpha Vantage API key.
            - base_url (str): The base URL for the Alpha Vantage API.
            - ticker (str): The stock ticker symbol (e.g., 'AAPL').
            - income_statement_period (str): The period for which to fetch the data ('annual' or 'quarterly').

        Returns:
            - list: A list of Income Statement data fetched from Alpha Vantage.
    """

    try:
        # Base URL for Alpha Vantage Income Statement API
        alpha_vantage_url = base_url

        # Alpha Vantage function to query
        alpha_vantage_function = "INCOME_STATEMENT"

        # Parameters for the API request
        params = {
            "function": alpha_vantage_function,  # Alpha Vantage function to query
            "symbol": ticker,                    # Ticker symbol (e.g., MSFT)
            "apikey": api_key,                   # Your API key
            "datatype": "json"                   # You can choose "map", "json", or "csv"
        }

        # Sending request to the API
        response = requests.get (alpha_vantage_url, params=params)

        # HTTP Status Code for successful response
        HTTP_OK = 200

        # Check if response is successful
        if HTTP_OK == response.status_code:

            # Extract the JSON data from the response
            alpha_vantage_data = response.json()

            # If the Income Statement is "annual"
            if "annual" == income_statement_period:
                    
                # If the response contains the 'annualReports' key, extract the data
                if 'annualReports' in alpha_vantage_data:
                    
                    # Extract the annual reports data
                    annual_income_statement_reports = alpha_vantage_data['annualReports']

                    return annual_income_statement_reports
                
                # If the response does not contain the 'annualReports' key
                else:
                    exception_msg = (f"No Income Statement 'annualReports' data available on 'Alpha Vantage' (Ticker: {ticker}).")

                     # Check if the response contains 'Information' key
                    if 'Information' in alpha_vantage_data:
                        alpha_vantage_info = alpha_vantage_data['Information']
                        exception_msg = f"{exception_msg}\n 'Alpha Vantage' Response: {alpha_vantage_info}"

                    raise AlphaVantageError (exception_msg)

            # If the Income Statement is "quarterly"
            elif "quarterly" == income_statement_period:
                
                # If the response contains the 'quarterlyReports' key, extract the data
                if 'quarterlyReports' in alpha_vantage_data:
                    
                    # Extract the quarterly reports data
                    quarterly_income_statement_reports = alpha_vantage_data['quarterlyReports']

                    return quarterly_income_statement_reports
                
                # If the response does not contain the 'quarterlyReports' key
                else:
                    exception_msg = f"No Income Statement 'quarterlyReports' data available on 'Alpha Vantage' (Ticker: {ticker})."
                    
                    # Check if the response contains 'Information' key
                    if 'Information' in alpha_vantage_data:
                        alpha_vantage_info = alpha_vantage_data['Information']

                        exception_msg = f"{exception_msg}\n 'Alpha Vantage' Response: {alpha_vantage_info}"

                    raise AlphaVantageError (exception_msg)
                
            else:
                raise AlphaVantageError (f"Invalid Income Statement period '{income_statement_period}' specified. Please choose 'annual' or 'quarterly' (Ticker: {ticker}).")

    except Exception as exc:
        exception_msg = f"Error fetching Income Statement data from 'Alpha Vantage' (Ticker: {ticker}). Error: {exc}"
        raise AlphaVantageError (exception_msg) from exc

