# encoding: utf-8

# Copyright (c) Ivan AntunoviÄ‡ (ivantun05@gmail.com) - All rights reserved.
# Unintended redistribution can be punishable by law.
# By reading this message, you are automatically consenting to it
# and you are accepting that the financial data might be incorrect.
# The financial data generated by this script is for informational purposes only
# and should not be considered as investment nadvice.
# Use at your own risk.


"""
Encapsulates logic for selecting the most appropriate metric value
from multiple sources for each metric category.
"""

def select_roe (roe):
    """
    Selects the most appropriate ROE value from the available sources.

    Parameters:
        roe (object): An object containing various ROE values from different sources.

    Returns:
        float or None: The selected ROE value based on the priority of sources.
    """
    # ROE TTM from Yahoo Finance
    if roe.ttm_yf is not None:
        return roe.ttm_yf
    # ROE TTM calculcated
    elif roe.ttm_calc is not None:
        return roe.ttm_calc
    # ROE annual list is not None and has at least one value
    elif roe.annual_list is not None and len (roe.annual_list) > 0:
        return roe.annual_list[0]
    # ROE MSCI
    elif roe.msci is not None:
        return roe.msci
    else:
        return None



def select_roa (roa):
    """
    Selects the most appropriate ROA value from the available sources.

    Parameters:
        roa (object): An object containing various ROA values from different sources.

    Returns:
        float or None: The selected ROA value based on the priority of sources.
    """
    # ROA TTM from Yahoo Finance
    if roa.ttm_yf is not None:
        return roa.ttm_yf
    # ROA TTM calculated
    elif roa.ttm_calc is not None:
        return roa.ttm_calc
    # ROA annual list is not None and has at least one value
    elif roa.annual_list is not None and len (roa.annual_list) > 0:
        return roa.annual_list[0]
    else:
        return None



def select_cfoa (cfoa_ttm, cfoa_annual_list):
    """
    Selects the most appropriate CFOA value from the available sources.

    Parameters:
        cfoa_ttm (float): CFOA TTM value.
        cfoa_annual_list (list): List of CFOA annual values.

    Returns:
        float or None: The selected CFOA value based on the priority of sources.
    """
    # CFOA TTM
    if cfoa_ttm is not None:
        return cfoa_ttm
    # CFOA annual list is not None and has at least one value
    elif cfoa_annual_list is not None and len (cfoa_annual_list) > 0:
        return cfoa_annual_list[0]
    else:
        return None



def select_gpoa (gpoa_ttm, gpoa_annual_list):
    """
    Selects the most appropriate GPOA value from the available sources.

    Parameters:
        gpoa_ttm (float): GPOA TTM value.
        gpoa_annual_list (list): List of GPOA annual values.

    Returns:
        float or None: The selected GPOA value based on the priority of sources.
    """
    # GPOA TTM
    if gpoa_ttm is not None:
        return gpoa_ttm
    # GPOA annual list is not None and has at least one value
    elif gpoa_annual_list is not None and len (gpoa_annual_list) > 0:
        return gpoa_annual_list[0]
    else:
        return None



def select_gpmar (gpmar_ttm, gpmar_annual_list):
    """
    Selects the most appropriate GPMAR value from the available sources.

    Parameters:
        gpmar_ttm (float): GPMAR TTM value.
        gpmar_annual_list (list): List of GPMAR annual values.

    Returns:
        float or None: The selected GPMAR value based on the priority of sources.
    """
    # GPMAR TTM
    if gpmar_ttm is not None:
        return gpmar_ttm
    # GPMAR annual list is not None and has at least one value
    elif gpmar_annual_list is not None and len (gpmar_annual_list) > 0:
        return gpmar_annual_list[0]
    else:
        return None