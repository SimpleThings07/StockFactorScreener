# encoding: utf-8

# Copyright (c) Ivan Antunović (ivantun05@gmail.com) - All rights reserved.
# Unintended redistribution can be punishable by law.
# By reading this message, you are automatically consenting to it
# and you are accepting that the financial data might be incorrect.
# The financial data generated by this script is for informational purposes only
# and should not be considered as investment advice.
# Use at your own risk.



# Data Manipulation Modules
import pandas as pd
import math

# Local Modules
from EarningsEngine import (
    get_earnings,
    get_net_income,
    calc_eps_ttm,
)

from AlphaVantageHelper import (
    get_income_statement_alpha_vantage,
    get_balance_sheet_alpha_vantage
)



# ---------------------- Custom Exceptions ----------------------

class ROECalcError(Exception):
    """
        Custom exception for errors in Return on Equity (ROE) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message

class ROACalcError(Exception):
    """
        Custom exception for errors in Return on Assets (ROA) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message

class GPOACalcError(Exception):
    """
        Custom exception for errors in Gross Profits over Assets (GPOA) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message


class GPMARCalcError(Exception):
    """
        Custom exception for errors in Gross Profit Margin (GPMAR) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message


class CFOACalcError(Exception):
    """
        Custom exception for errors in Cash Flow over Assets (CFOA) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message

class BVPSCalcError(Exception):
    """
        Custom exception for errors in Book Value per Share (BVPS) calculation.
    """
    def __init__(self, message):
        super().__init__(message)
        self.message = message


class CAGRCalcError(Exception):
    """Custom exception for errors in CAGR calculation."""
    def __init__(self, message):
        super().__init__(message)
        self.message = message


# ---------------------- Function definitions ----------------------

def calc_roe_ttm (stock, ticker):
    """
        Calculate Return on Equity (ROE) for the trailing 12 months (TTM) using Net Income and Shareholder's Equity.

            ROE = Net Income / Shareholder's Equity

            MSCI Methodology defines ROE) is as the trailing 12 month earnings per share (EPS) figure divided by the latest book value per share.

            We however use the trailing 12 month net income instead of EPS divided by the latest annual shareholder's equity.

                Net income over the last full fiscal year, or trailing 12 months
                Average shareholders' equity is calculated by adding equity at the beginning of the period. The beginning and end of the period should coincide with the period during which the net income is earned.
                Because net income is earned over a period of time and shareholders' equity is a balance sheet account often reporting on a single specific period, an analyst should take an average equity balance.
                This is often done by taking the average between the beginning balance and ending balance of equity.

                https://www.investopedia.com/terms/r/returnonequity.asp?utm_source=chatgpt.com


        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.

        Returns:
            - float: The calculated Return on Equity (ROE) TTM, or None if data is missing. Calculated as a fraction.
    """

    roe_ttm = None

    try:

        # -------------- 1. Net Income  --------------

        net_income_ttm = get_net_income (
            stock,
            ticker,
            'ttm'     # Use TTM (Trailing Twelve Months) for Net Income
        )


        # -------------- 2. Shareholder's Equity --------------

        # Fetch Shareholders' Equity (or Stockholders' Equity) from the balance sheet (quarterly data)
        balance_sheet = stock.quarterly_balance_sheet.T  # Transpose to have dates as rows

        # Get "Stockholders' Equity" from the balance sheet data
        stockholders_equity_list = balance_sheet['Stockholders Equity'].tolist()   # Convert to list for easier indexing

        # If Stockholders' Equity is not available, log a warning and set ROE as None
        if stockholders_equity_list is None:
            # Raise exception to indicate missing data
            raise ROECalcError (f"Cannot calculate ROE (Ticker: {ticker}): Data for Shareholder's Equity is missing")
        

        # Remove all NaN values from the Stockholders' Equity list
        stockholders_equity_list = [equity for equity in stockholders_equity_list if not pd.isna(equity)]
        # Check if we have at least 1 year of annual data
        

        # If your numerator is the trailing-twelve-month (TTM) net income ending in the most-recent quarter q, the cleanest book-ends for equity are:
        #   Beginning-of-period equity – the balance-sheet at q-4 (one year ago)
        #   End-of-period equity – the balance-sheet at q (now)
        #
        # Taking the simple average of those two equity values gives you the capital that supported the earnings for the full 12-month window.
        #
        # ROE(TTM)  =        Net-income_TTM
        #             ───────────────────────────────
        #               (Equity_q-4  +  Equity_q) ÷ 2

        # Check if we have at least 4 quarters of data for TTM calculation
        if len(stockholders_equity_list) < 5:
            # Raise exception to indicate missing data
            raise ROECalcError (f"Cannot calculate ROE TTM (Ticker: {ticker}): Not enough Stockholders' Equity quarterly data is available. \n Data for at least 5 quarters is required.")


        # Calculate TTM Stockholders' Equity as the average of the latest two quarters of Stockholders' Equity data
        # Latest quarter is the 0th index in the list
        # Get the latest two quarters of Stockholders' Equity
        # The latest quarter is the 0th index in the list
        # The fourth latest quarter is the 3rd index in the list

        equity_quartal_end = stockholders_equity_list[0]      # Qn from the current year  (e.g. Q1 2025)
        equity_quartal_begin = stockholders_equity_list[4]    # Qn from the previous year (e.g. Q1 2024)

        stockholders_equity_ttm = ( equity_quartal_end + equity_quartal_begin ) / 2


        # -------------- 3. Calculate ROE --------------

        # Calculate ROE TTM
        roe_ttm = net_income_ttm / stockholders_equity_ttm


        return roe_ttm

    except Exception as ex:
        raise ROECalcError (f"Cannot calculate ROE (Ticker: {ticker}): An error occurred: {ex}") from ex



def get_roe_ttm (stock_info):
    """
        Get Return on Equity (ROE) from Yahoo Finance data.

        Parameters:
            - stock_info (dict): A dictionary containing the stock information.
            - ticker (str): The stock ticker symbol.

        Returns:
            - float: The Return on Equity (ROE) as a fraction
    """
    roe_yfinance = None

    # -------------- ROE from Yahoo Finance --------------
    # Fetch ROE from the Yahoo Finance data
    roe_yfinance = stock_info.get("returnOnEquity", None)

    return roe_yfinance



def calc_roe (stock, ticker, config, years=4):
    """
        Calculate Return on Equity (ROE) using Net Income and Shareholder's Equity for specified year period.

            ROE = Net Income / Shareholder's Equity

        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.
            - config (dict): A dictionary containing the configuration settings.
            - years (int): The number of years to calculate ROE for. Default is 5.

        Returns:
            - float: The calculated Return on Equity (ROE) for the specified range of years, or None if data is missing. Calculated as a fraction.
    """

    o_roe_calc_list = []

    try:

        # -------------- 1. Get Net Income  --------------

        net_income_list = get_earnings (
            stock,
            ticker,
            "net_income",
            config['Earnings_Period'],
            config['AlphaVantage']['API_Key'], 
            config['AlphaVantage']['Base_URL'], 
        )


        # -------------- 2. Get Shareholder's Equity from Balance Sheet --------------

        # Fetch Shareholders' Equity (or Stockholders' Equity) from the balance sheet (annual data)
        balance_sheet = stock.balance_sheet.T  # Transpose to have dates as rows

        try:

            # Get "Stockholders' Equity" from the balance sheet data
            stockholders_equity_list = balance_sheet['Stockholders Equity'][:years]

            # If Stockholders' Equity is not available, log a warning and set ROE as None
            if stockholders_equity_list is None or stockholders_equity_list.empty:
                raise ValueError(f"Cannot calculate ROE (Ticker: {ticker}): Data for Shareholder's Equity is missing")

        except KeyError as key_error:
            raise ValueError(f"Cannot calculate ROE (Ticker: {ticker}): Data for Shareholder's Equity is missing: {key_error}") from key_error

        # -------------- 3. Calculate ROE --------------

        # Calculate ROE for each year
        for net_income, stockholders_equity in zip (net_income_list, stockholders_equity_list):

            # ROE = Net Income / Shareholder's Equity
            roe_calc = (net_income / stockholders_equity)

            o_roe_calc_list.append(roe_calc)

        return o_roe_calc_list

    except KeyError as key_error:
        raise ValueError(f"KeyError during ROE calculcation: Missing expected data field in Yahoo Finance for Ticker {ticker}. Error: {key_error}") from key_error
    except Exception as ex:
        raise ValueError(f"Unexpected error during ROE calculation for Ticker {ticker}: {ex}") from ex



def calc_roe_msci (stock, ticker):
    """
    Calculate Return on Equity (ROE) for a given stock ticker.
    Data is fetched from Yahoo Finance using the yfinance library.

    ROE is calculated using the following formula:
        ROE = EPS (TTM) / BVPS
    Where:
        - EPS (TTM): Trailing 12-month earnings per share.
        - BVPS: Book Value Per Share, calculated as:
    
            BVPS = Total Stockholders' Equity / Shares Outstanding

    
    Parameters:
        - ticker (str): Stock ticker symbol (e.g., 'AAPL').
        
    Returns:
        - dict: Contains EPS (TTM), BVPS, and ROE as percentage.
    """

    # -------------------------- 1. Get Trailing EPS (TTM) --------------------------

    trailing_EPS = calc_eps_ttm (stock, ticker)

    if trailing_EPS is None:
        raise ROECalcError("Cannot calculate ROE! EPS (TTM) data is not available (Ticker: {ticker}).")

    
    #  -------------------------- 2. Get Book Value Per Share (BVPS) --------------------------

    # Calculate Book Value Per Share (BVPS)
    bvps = calc_quarterly_bvps (stock, ticker)

    # Calculate ROE
    try:
        roe = trailing_EPS / bvps
    except ZeroDivisionError:
        raise ROECalcError("Cannot calculate ROE! Book Value Per Share (BVPS) is zero (Ticker: {ticker}).")
    
    # Return calculated ROE result
    return roe



def calc_quarterly_bvps (stock, ticker):
    """
    Calculate Book Value Per Share (BVPS) partially using MSCI methodology (Treasury Shares and Preferred Shares are excluded).

    Formula:
        BVPS = (Stockholders' Equity - Minority Interest) / Shares Outstanding

    Where:
        - Stockholders' Equity: Total equity available to shareholders (excluding preferred shares and treasury shares).
        - Minority Interest: Portion of equity owned by minority shareholders, excluded from BVPS for common shareholders.
        - Treasury Shares: Company-owned shares, excluded as they are not part of public shares.
        - Preferred Shares: Equity reserved for preferred shareholders, excluded as they do not belong to common shareholders.
        - Shares Outstanding: Number of common shares available in the market.

    Parameters:
        - stock (yfinance.Ticker): The stock object fetched using yfinance.
        - ticker (str): Stock ticker symbol.

    Returns:
        - float: The calculated BVPS, or None if data is missing.
    """
    o_bvps = None

    try:
        # Fetch quarterly balance sheet data
        quarterly_balance_sheet = stock.quarterly_balance_sheet.T  # Transpose to make dates rows

        # Get the most recent quarter's data
        latest_quarter_balance_sheet = quarterly_balance_sheet.iloc[0]  # Fetch the first row (most recent quarter)

        # Retrieve Stockholders' Equity data
        stockholders_equity = latest_quarter_balance_sheet['Stockholders Equity']
        # Retrieve Minority Interest data
        minority_interest = latest_quarter_balance_sheet.get('Minority Interest', 0)
        if pd.isna(minority_interest):  # Check if Minority Interest is NaN
            minority_interest = 0
        # Retrieve Shares Outstanding data
        shares_outstanding = stock.info['sharesOutstanding']  # Assuming constant shares outstanding

        # Equity adjusted for minority interest
        equity_adjusted = stockholders_equity - minority_interest

        # Calculate BVPS for each quarter
        o_bvps = equity_adjusted / shares_outstanding

        return o_bvps

    except Exception as ex:
        raise BVPSCalcError(f"Error calculating quarterly BVPS for {ticker}! Error: {ex}") from ex




def calc_roa (stock, ticker, config, years=4):
    """
    Calculate ROA using Net Income and Total Assets from Yahoo Finance data.

    ROA is calculated as:
        ROA = Net Income / Total Assets

    """

    o_roa_calc_list = []

    try:

        # -------------- 1. Get Net Income  --------------

        net_income_list = get_earnings (
            stock,
            ticker,
            "net_income",
            config['Earnings_Period'],
            config['AlphaVantage']['API_Key'], 
            config['AlphaVantage']['Base_URL'], 
        )

        if not net_income_list:
            raise ROACalcError (f"Cannot calculate ROA (Ticker: {ticker}): No Net Income data available.")


        # -------------- 2. Get Shareholder's Equity from Balance Sheet --------------

        # Fetch Shareholders' Equity (or Stockholders' Equity) from the balance sheet (annual data)
        balance_sheet = stock.balance_sheet.T  # Transpose to have dates as rows

        try:
                
            # Get "Stockholders' Equity" from the balance sheet data
            total_assets_list = balance_sheet['Total Assets'][:years]

            # If Total Assets is not available, log a warning and set ROA as None
            if total_assets_list is None:
                raise ROACalcError (f"Cannot calculate ROA (Ticker: {ticker}): Data for Total Assets is missing")
            
        except KeyError as key_error:
            raise ROACalcError (f"Cannot calculate ROA (Ticker: {ticker}): 'Total Assets' data is missing in the balance sheet.") from key_error

        # -------------- 3. Calculate ROE --------------

        # Calculate ROA for each year
        for net_income, total_assets in zip (net_income_list, total_assets_list):

            # ROA = Net Income / Total Assets
            roa_calc = (net_income / total_assets)

            o_roa_calc_list.append(roa_calc)

        return o_roa_calc_list

    except Exception as ex:
        raise ROACalcError(f"Unexpected error during ROE calculation for Ticker {ticker}! Error: {ex}") from ex



def get_roa_ttm (stock_info):
    """
        Get Return on Assets (ROA) from Yahoo Finance data.

        Parameters:
            - stock_info (dict):
            - ticker (str): The stock ticker symbol.

        Returns:
            - float: The Return on Assets (ROA) as a fraction
    """
    roa_yfinance = None

    # -------------- ROA from Yahoo Finance --------------
    # Fetch ROA from the Yahoo Finance data
    roa_yfinance = stock_info.get("returnOnAssets", None)

    return roa_yfinance



def calc_gpoa_ttm ( stock, ticker ):

    """

        Calculate Gross Profits over Assets (GPOA) using Gross Profits and Total Assets with TTM data.

        GPOA = Gross Profits / Total Assets

        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.

        Returns:
            - float: The calculated Gross Profits over Assets (GPOA) TTM, or None if data is missing. Calculated as a fraction.
    
    """

    gpoa_ttm = None


    # --------------------------- Gross Profit ---------------------------

    # Get quarterly income statement
    income_statement = stock.quarterly_financials.T  # Transpose to have dates as rows

    if 'Gross Profit' not in income_statement.columns:
        # Raise GPOA Calculaction Error
        raise GPOACalcError(f"Cannot calculate GPOA (Ticker: {ticker}): 'Gross Profit' data is missing in the Income Statement.")


    # Get the Gross Profit Data and clean 'nan' values
    gross_profit_list = income_statement['Gross Profit'].tolist()
    gross_profit_list = [gross_profit for gross_profit in gross_profit_list if not math.isnan(gross_profit)]

    # Calculate Gross Profit TTM using the latest four quarters of Gross Profit data
    if len(gross_profit_list) < 4:
        raise GPOACalcError(f"Cannot calculate GPOA TTM (Ticker: {ticker}): Not enough Gross Profit quarterly data is available. \n Data for at least 4 quarters is required.")
    
    # Get the latest four quarters of Gross Profit
    gross_profit_ttm = sum(gross_profit_list[:4])  # Sum the latest four quarters of Gross Profit data


    # --------------------------- Total Assets ---------------------------

    # Get quarterly balance sheet
    balance_sheet = stock.quarterly_balance_sheet.T  # Transpose to have dates as rows

    if 'Total Assets' not in balance_sheet.columns:
        raise GPOACalcError(f"Cannot calculate GPOA (Ticker: {ticker}): 'Total Assets' data is missing in the Balance Sheet.")

    # Get the Total Assets Data and clean 'nan' values
    total_assets_list = balance_sheet['Total Assets'].tolist()
    total_assets_list = [total_assets for total_assets in total_assets_list if not math.isnan(total_assets)]

    # Calculate the average Total Assets using the latest four quarters of Total Assets data
    if len(total_assets_list) < 4:
        raise GPOACalcError(f"Cannot calculate GPOA TTM (Ticker: {ticker}): Not enough Total Assets quarterly data is available. \n Data for at least 4 quarters is required.")
    
    # Get the latest four quarters of Total Assets
    total_assets_ttm = sum(total_assets_list[:4]) / 4  # Average the latest four quarters of Total Assets data


    # --------------------------- Calculate GPOA TTM ---------------------------

    if total_assets_ttm == 0:
        raise GPOACalcError(f"Cannot calculate GPOA TTM (Ticker: {ticker}): Total Assets TTM is zero, division by zero is not allowed.")

    gpoa_ttm = gross_profit_ttm / total_assets_ttm  # Calculate GPOA TTM as Gross Profit TTM divided by Total Assets TTM

    return gpoa_ttm



def calc_gpmar_ttm ( stock, ticker ):
    """
        Calculates Gross Profit Margin (GPMAR) using Gross Profit and Revenue as TTM.

        GPMAR is calculated as: GPMAR = Gross Profit / Revenue

        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.

    """

    gpmar_ttm = None


    # Get quarterly income statement
    income_statement = stock.quarterly_financials.T  # Transpose to have dates as rows


    # --------------- Gross Profit ---------------

    if 'Gross Profit' not in income_statement.columns:
        raise GPMARCalcError(f"Cannot calculate GPOA (Ticker: {ticker}): 'Gross Profit' data is missing in the Income Statement.")

    # Get the Gross Profit Data and clean 'nan' values
    gross_profit_list = income_statement['Gross Profit'].tolist()
    gross_profit_list = [gross_profit for gross_profit in gross_profit_list if not math.isnan(gross_profit)]

    # Calculate Gross Profit TTM using the latest four quarters of Gross Profit data
    if len(gross_profit_list) < 4:
        raise GPMARCalcError(f"Cannot calculate GPOA TTM (Ticker: {ticker}): Not enough Gross Profit quarterly data is available. \n Data for at least 4 quarters is required.")
    
    # Get the latest four quarters of Gross Profit
    gross_profit_ttm = sum(gross_profit_list[:4])  # Sum the latest four quarters of Gross Profit data



    # --------------- Revenue ---------------
    if 'Total Revenue' not in income_statement.columns:
        raise GPMARCalcError(f"Cannot calculate GPMAR (Ticker: {ticker}): 'Total Revenue' data is missing in the Income Statement.")

    # Get the Revenue Data and clean 'nan' values
    revenue_list = income_statement['Total Revenue'].tolist()
    revenue_list = [revenue for revenue in revenue_list if not math.isnan(revenue)]

    # Calculate Revenue TTM using the latest four quarters of Revenue data
    if len(revenue_list) < 4:
        raise GPMARCalcError(f"Cannot calculate GPMAR TTM (Ticker: {ticker}): Not enough Revenue quarterly data is available. \n Data for at least 4 quarters is required.")
    
    # Get the latest four quarters of Revenue
    revenue_ttm = sum(revenue_list[:4])  # Sum the latest four quarters of Revenue data



    # --------------- Calculate GPMAR TTM ---------------
    if revenue_ttm == 0:
        raise GPMARCalcError(f"Cannot calculate GPMAR TTM (Ticker: {ticker}): Revenue TTM is zero, division by zero is not allowed.")

    gpmar_ttm = gross_profit_ttm / revenue_ttm  # Calculate GPMAR TTM as Gross Profit TTM divided by Revenue TTM


    return gpmar_ttm



def calc_cfoa (stock, ticker):
    """
    Calculates Cash Flow Over Assets (CFOA) for the past specified number of years using Yahoo Finance data.
    Cash Flow Over Assets (CFOA) is calculated as:

        CFOA = Cash Flow from Operating Activities / Total Assets

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.
        - ticker (str): Stock ticker symbol.

    Returns:
        - list: CFOA values for each year.
    """
    # Initialize the CFOA dictionary
    cfoa_list = []

    # Fetch the Cash Flow from Operating Activities (CFOA) data from Yahoo Finance
    try:

        # ---------------------- Cash Flow from Operating Activities ----------------------
        cash_flow_operating = None
        try:

            # Fetch the Cash Flow from Operating Activities (CFOA) data
            cash_flow_operating = stock.cashflow.loc['Operating Cash Flow']

            # Check if the CFOA data is available
            if cash_flow_operating is None:
                raise CFOACalcError (f"No Cash Flow from Operating Activities data found (Ticker: {ticker}). Cannot calculate CFOA!")

            # Convert the CFOA data to a list
            cash_flow_operating = cash_flow_operating.tolist()

        except KeyError as ex:
            raise CFOACalcError (f"Cannot calculate CFOA! 'Operating Cash Flow' data is missing in the cash flow statement (Ticker: {ticker}).") from ex


        # ---------------------- Total Assets ----------------------
        total_assets = None
        try:

            # Fetch the Total Assets data from the balance sheet
            total_assets = stock.balance_sheet.loc['Total Assets']

            # Check if the Total Assets data is available
            if total_assets is None:
                raise CFOACalcError(f"No Total Assets data found (Ticker: {ticker}). Cannot calculate CFOA!")
 
            # Convert the Total Assets data to a list
            total_assets = total_assets.tolist()

        except KeyError as exc:
            raise CFOACalcError(f"Cannot calculate CFOA! 'Total Assets' data is missing in the balance sheet (Ticker: {ticker}).") from exc


        # ---------------------- Calculate CFOA  ----------------------
        # Get the CFOA data for the requested number of years if available
        for i in range(0, min ( len(cash_flow_operating), len(total_assets) ) ):

            # Calculate the CFOA for each year
            cfoa = cash_flow_operating[i] / total_assets[i]
            # Only append if not NaN
            if not pd.isna(cfoa):
                cfoa_list.append(cfoa)

        return cfoa_list

    except Exception as exc:
        raise CFOACalcError(f"Error occured while calculcating CFOA (Ticker: {ticker}): {exc}!") from exc



def calc_cfoa_ttm (stock, ticker):
    """
    Calculates Cash Flow Over Assets (CFOA) for the TTM period using Yahoo Finance data.
    Cash Flow Over Assets (CFOA) is calculated as:

        CFOA = Cash Flow from Operating Activities / Total Assets

    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.
        - ticker (str): Stock ticker symbol.

    Returns:
        - cfoa_ttm (float): CFOA value for the TTM period, or Exception if data is missing.
    """

    cfoa_ttm = None

    try:

        # Make sure the dates match for both Cash Flow from Operating Activities and Total Assets
        # This is important to ensure that the CFOA is calculated correctly for the TTM period.
        # If the dates do not match, throw exception.
        # Cash Flow from Operating Activities (CFOA) and Total Assets are both quarterly data,
        # so we can use the latest quarter date for both.

        # Cash Flow from Operating Activitie
        cash_flow_operating = stock.quarterly_cashflow.loc['Operating Cash Flow']
        # get the latest quarter date for Cash Flow from Operating Activities
        cfo_latest_quarter_date = cash_flow_operating.index[0]

        # Total Assets
        total_assets = stock.quarterly_balance_sheet.loc['Total Assets']
        # get the latest quarter date for Total Assets
        ta_latest_quarter_date = total_assets.index[0]

        # Check if the latest quarter dates for Cash Flow from Operating Activities and Total Assets match
        if cfo_latest_quarter_date != ta_latest_quarter_date:
            raise CFOACalcError(f"Cannot calculate CFOA TTM (Ticker: {ticker}): The latest quarter dates for Cash Flow from Operating Activities and Total Assets do not match. \n Cash Flow from Operating Activities date: {cfo_latest_quarter_date}, Total Assets date: {ta_latest_quarter_date}.")


        # ---------------------- Cash Flow from Operating Activities ----------------------

        # Check if the CFOA data is available
        if cash_flow_operating is None:
            raise CFOACalcError(f"No Cash Flow from Operating Activities data found (Ticker: {ticker}). Cannot calculate CFOA (ttm)!")

        # Convert the CFOA data to a list and clean 'nan' values
        cash_flow_operating_list = cash_flow_operating.tolist()
        cash_flow_operating_list = [cfo for cfo in cash_flow_operating_list if not pd.isna(cfo)]

        # Calculate Cash Flow from Operating Activities (CFOA) TTM using the latest four quarters of CFOA data
        if len(cash_flow_operating_list) < 4:
            raise CFOACalcError(f"Cannot calculate CFOA TTM (Ticker: {ticker}): Not enough Cash Flow from Operating Activities quarterly data is available. \n Data for at least 4 quarters is required.")

        # Get the latest four quarters of Cash Flow from Operating Activities
        # latest four quarters of Cash Flow from Operating Activities data
        # Calculate the sum of the latest four quarters of Cash Flow from Operating Activities
        cash_flow_operating_ttm = sum(cash_flow_operating_list[:4])  # Sum the latest four quarters of Cash Flow from Operating Activities data


        # ---------------------- Total Assets ----------------------

        # Check if the Total Assets data is available
        if total_assets is None:
            raise CFOACalcError(f"No Total Assets data found (Ticker: {ticker}). Cannot calculate CFOA TTM!")

        # Convert the Total Assets data to a list and clean 'nan' values
        total_assets_list = total_assets.tolist()
        total_assets_list = [ta for ta in total_assets_list if not pd.isna(ta)]

        # Calculate Total Assets as the avrage of the latest four quarters of Total Assets data
        if len(total_assets_list) < 4:
            raise CFOACalcError(f"Cannot calculate CFOA TTM (Ticker: {ticker}): Not enough Total Assets quarterly data is available. \n Data for at least 4 quarters is required.")

        # Get the latest four quarters of Total Assets
        total_assets_list = total_assets_list[:4]  # Get the latest four quarters of Total Assets data
        # Calculate the average of the latest four quarters of Total Assets
        total_assets_avg = sum(total_assets_list) / len(total_assets_list)  # Average


        # ---------------------- Calculate CFOA TTM  ----------------------

        # Make sure that Total Assets is not zero to avoid division by zero
        if total_assets_avg == 0:
            raise CFOACalcError(f"Cannot calculate CFOA TTM (Ticker: {ticker}): Total Assets average is zero, division by zero is not allowed.")

        # Calculate TTM CFOA as the average of the latest four quarters of Cash Flow from Operating Activities divided by the average of the latest four quarters of Total Assets
        cfoa_ttm = cash_flow_operating_ttm / total_assets_avg

        return cfoa_ttm

    except Exception as exc:
        raise CFOACalcError(f"Error occurred while calculcating CFOA TTM (Ticker: {ticker}): {exc}!") from exc



def calc_gross_profit_metrics(config, stock, ticker, data_period_req):

    """

    Calculates annual Gross Profit Profitability Metrics:
        1) Gross Profit over Assets (GPOA)
        2) Gross Profit Margin (GPMAR)

    1) Calculates Gross Profits over Assets (GPOA) using Gross Profits and Total Assets for specified number of years.

        GPOA is calculated as: GPOA = Gross Profit / Total Assets

            Gross Profit = Total Revenue - Cost of Goods Sold

    2) Calculates Gross Profit Margin (GPMAR) using Gross Profit and Revenue for specified number of years.

        GPMAR is calculated as: GPMAR = Gross Profit / Revenue

    Parameters:
        - config (dict): A dictionary containing the configuration settings.
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.
        - ticker (str): The stock ticker symbol.
        - data_period_req (int): The number of years for which to calculate GPOA & GPMAR.

    Returns:
        - tuple: A tuple containing the GPOA and GPMAR lists with the annual metrics for the specified number of years.

    https://www.alphavantage.co/documentation/#income-statement
    """


    # -------------- 1. Fetch the data ----------------


    # Initialize the GPOA list
    gpoa_list = []
    # Initialize the GPMAR list
    gpmar_list = []

    messages = None

    try:
        # Fetch the Gross Profit data from the financials
        income_statement = stock.financials.T   # Transpose to have dates as rows

        # Check if the Income Statement data is available
        if income_statement is None:
            raise GPOACalcError (f"No Income Statement data found (Ticker: {ticker}). Cannot calculate GPOA & GPMAR!")

        # Initialize the Gross Profit list (for GPOA & GPMAR calculation)
        gross_profits = []
        # Initialize the Total Assets list (for GPOA calculation)
        total_assets = []
        # Initialize the Total Revenue list (for GPMAR calculation)
        total_revenues = []

        # Check if 'Gross Profit' data is available in the income statement
        if 'Gross Profit' in income_statement.columns:

            # Fetch the Gross Profit data from the Income Statement (Yahoo Finance)
            gross_profits = income_statement['Gross Profit'].tolist()

            # Remove 'nan' values from the Gross Profit list
            gross_profits = [gross_profit for gross_profit in gross_profits if not math.isnan(gross_profit)]


            # Fetch the Total Revenue data from the Income Statement (Yahoo Finance)
            total_revenues = income_statement['Total Revenue'].tolist()

            # Remove 'nan' values from the Total Revenue list
            total_revenues = [total_revenue for total_revenue in total_revenues if not math.isnan(total_revenue)]


            # Fetch the Total Assets data from the Balance Sheet (Yahoo Finance)
            total_assets = stock.balance_sheet.loc['Total Assets'].tolist()

            # Remove 'nan' values from the Total Assets list
            total_assets = [total_asset for total_asset in total_assets if not math.isnan(total_asset)]

        else:
            # logging.warning (f"Gross Profit data not found on Yahoo Finance (Ticker: {ticker}).")
            # logging.warning (f"Fetching Gross Profit data from 'Alpha Vantage'.")

            # -------------- 1.1 Gross Profit --------------

            # Fallback to Alpha Vantage to fetch Income Statement for Gross Profit data
            annual_income_statements = get_income_statement_alpha_vantage (
                config['AlphaVantage']['API_Key'],
                config['AlphaVantage']['Base_URL'],
                ticker,
                "annual"
            )

            # Check if the Income Statement data is available
            if annual_income_statements is None:
                raise GPOACalcError (f"No Gross Profit data found (Ticker: {ticker}). Cannot calculate GPOA & GPMAR!")


            # Fetch Gross Profit data from Income Statements (Alpha Vantage)
            gross_profits = [float(income_statement.get("grossProfit", 0)) for income_statement in annual_income_statements]

            # -------------- 1.2 Total Revenues --------------

            # Fetch Total Revenue data from the Income Statements (Alpha Vantage)
            total_revenues = [float(income_statement.get("totalRevenue", 0)) for income_statement in annual_income_statements]


            # -------------- 1.3 Total Assets --------------

            # Fallback to Alpha Vantage to fetch Balance Sheet data for Total Assets
            annual_balance_sheets = get_balance_sheet_alpha_vantage (
                config['AlphaVantage']['API_Key'], 
                config['AlphaVantage']['Base_URL'], 
                ticker,
                "annual"
            )

            # Check if the Balance Sheet data is available
            total_assets = None
            if annual_balance_sheets:
                # Fetch Total Assets data from Balance Sheets (Alpha Vantage)
                total_assets = [float(balance_sheet.get("totalAssets", 0)) for balance_sheet in annual_balance_sheets]
            else:
                #logging.error(f"No Total Assets data found (Ticker: {ticker}). Cannot calculate GPOA!")
                #logging.error(f"Only GPMAR calculcation can be done (Ticker: {ticker}).")
                total_assets = None



        # -------------- 2.1 Calculate GPOA --------------

        # GPOA = Gross Profit / Total Assets

        # Check if 'Gross Profit' and 'Total Asset' data is available
        if gross_profits and total_assets:

            try:
                # Calculate GPOA data for the requested number of years
                for i in range (0, min ( len(total_assets), len(gross_profits), data_period_req ) ):

                    # Calculate the GPOA for each year
                    gpoa = gross_profits[i] / total_assets[i]

                    # Append the GPOA value to the list
                    gpoa_list.append(gpoa)


            # Handle Division by Zero error
            except ZeroDivisionError:
                #logging.error(f"Error calculating GPOA (Ticker: {ticker}): Division by zero detected.")
                gpoa_list = None

            except Exception as e:
                #logging.error(f"Error fetching GPOA data (Ticker: {ticker})!")
                #logging.exception(f"Exception occurred: {e}")
                gpoa_list = None

        # Skip GPOA calculation if Total Assets data is missing
        else:
            gpoa_list = None

        # -------------- END of 2.1 Calculate GPOA --------------


        # -------------- 2.2 Calculate GPMAR --------------
        # GPMAR = Gross Profit / Revenue

        # Check if 'Gross Profit' and 'Total Revenue' data is available
        if gross_profits and total_revenues:

            try:

                # Calculate GPMAR data for the requested number of years
                for i in range (0, min ( len(total_revenues), len(gross_profits), data_period_req ) ):

                    # Calculate the GPMAR for each year
                    gpmar = gross_profits[i] / total_revenues[i]

                    # Append the GPMAR value to the list
                    gpmar_list.append(gpmar)

            # Handle Division by Zero error
            except ZeroDivisionError:
                #logging.error(f"Error calculating GPMAR (Ticker: {ticker}): Division by zero detected.")
                gpoa_list = None

            except Exception as e:
                #logging.error(f"Error fetching GPMAR data (Ticker: {ticker})!")
                #logging.exception(f"Exception occurred: {e}")
                gpoa_list = None

        else:
            gpmar_list = None

        # -------------- 2.2 END of Calculate GPMAR --------------

    except Exception as e:
        #logging.error(f"Error calculating GPOA & GPMAR (Ticker {ticker})!")
        #logging.exception(f"Exception occurred: {e}")
        return None, None


    return gpoa_list, gpmar_list



def calc_cagr (ticker, earnings):
    """
    Calculate the Compound Annual Growth Rate (CAGR) from a list of values. Can be Earnings, ROE, ROA, etc - all Profitability metrics.

    Formula Used:
        CAGR = ((F - I + |I|) / |I| ) ^ (1/n) - 1

    Where:
        - F = Final Value (Last value in the series)
        - I = Initial Value (First value in the series)
        - n = Number of increments YoY, i.e. time span between the first and last year
              e.g. for 4 years (2021 ... 2024), n = 2024 - 2021 = 3
    
        Conditions to Avoid Imaginary Numbers:
            - The ratio (F - I + |I|) / |I| must be non-negative.

        For more details see: http://fortmarinus.com/blog/1214/#edit-5374639318
    
    Parameters:
        - earnings (list): A list containing earnings growth elements.

    Returns:
        - float: The CAGR as a decimal (non-percentage) value.
    """

    MIN_GROWTH_DATA_POINTS = 2
    
    # Check if the earnings growth list is empty
    if earnings is None:
        raise CAGRCalcError (f"Cannot calculate CAGR. No Earnings Growth data available (Ticker: {ticker}).")
    
    # Check if there are enough earnings periods (data points) for CAGR calculation
    if len(earnings) < MIN_GROWTH_DATA_POINTS:
        raise CAGRCalcError (f"Not enough Earning Growth data points to calculate CAGR (Ticker: {ticker}). At least {MIN_GROWTH_DATA_POINTS} data points are required.")

    try:

        # Calculate the CAGR using the formula if both Ending and Beginning values are positive:
        #   CAGR = (Ending Value / Beginning Value) ^ (1 / n) - 1
        # Where:
        #   - Ending Value = The last value in the series
        #   - Beginning Value = The first value in the series
        #   - n = Number of increments YoY (earnings period - 1), i.e. time span between first and last year
        #

        # Calculate the CAGR using the ending and beginning earning growth values
        end_earnings_growth = earnings[0]
        # The beginning earnings value
        start_earnings_growth = earnings[-1]
        # Time span between the first and last year
        # n = len(earnings) - 1 because the number of periods is one less than the number of data points.
        n = len(earnings) - 1



        # If both End and Start values are positive, use standard CAGR formula
        if start_earnings_growth > 0 and end_earnings_growth > 0:
            cagr = ( (end_earnings_growth / start_earnings_growth) ** (1 / n) ) - 1
            return cagr


        # If both values are negative, and
        # earning losses have worsened
        if  (start_earnings_growth < 0 and end_earnings_growth < 0) and \
            (abs(end_earnings_growth) > abs(start_earnings_growth)):

            cagr = -1 * ((abs(end_earnings_growth) / abs(start_earnings_growth)) ** (1 / n) - 1)
            return cagr
        
        # If earnings are transitioning from positive to negative
        if start_earnings_growth > 0 and end_earnings_growth < 0:

            # Then it means the CAGR ratio is negative and we cannot calculate the CAGR for this case
            return -1


        # If earnings are transitioning from negative to positive or both positive
        #
        # Calculate the CAGR using the formula:
        #     CAGR = ((F - I + |I|) / |I| ) ^ (1/n) - 1
        # Where:
        #     - F = Final Value (Last value in the series)
        #     - I = Initial Value (First value in the series)
        #     - n = Number of periods (years)
        #
        # For more details see: http://fortmarinus.com/blog/1214/#edit-5374639318
        #
        cagr_ratio = (end_earnings_growth - start_earnings_growth + abs(start_earnings_growth)) / abs(start_earnings_growth)

        # Prevent CAGR calculation for negative values, as it would result in an imaginary number
        if cagr_ratio < 0:
            raise CAGRCalcError (f"Cannot calculate CAGR (Ticker: {ticker}). The ratio (F - I + |I|) / |I| must be non-negative.")

        cagr = (cagr_ratio) ** (1 / n) - 1

        # Return the calculated CAGR
        return cagr

    except ZeroDivisionError as zero_div_error:
        raise CAGRCalcError (f"Error calculating CAGR (Ticker: {ticker}): Division by zero detected. Error: {zero_div_error}") from zero_div_error

    except Exception as exc:
        raise CAGRCalcError (f"Error calculating CAGR (Ticker: {ticker}): {exc}") from exc
